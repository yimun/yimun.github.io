<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>P-贴图和文件分享工具</title>
      <link href="/2018/01/21/P-%E8%B4%B4%E5%9B%BE%E5%92%8C%E6%96%87%E4%BB%B6%E5%88%86%E4%BA%AB%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/01/21/P-%E8%B4%B4%E5%9B%BE%E5%92%8C%E6%96%87%E4%BB%B6%E5%88%86%E4%BA%AB%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>离开豆瓣半年后，最近开始无比怀念之前内网的一个贴图和文件分享工具，于是决定再琢磨下这个轮子。</p><p>在 Github 上用关键字搜索之后，发现清风老师早在2013年已经开源了这个项目 <a href="https://github.com/qingfeng/p" target="_blank" rel="noopener">qingfeng/p</a>，项目基于flask+MySQL+mako+jQuery，已经可以脱离DAE（Douban App Engine）直接运行了，正合我意。</p><p>刚想部署时，又发现了小明老师的一个重写版本 <a href="https://github.com/dongweiming/r" target="_blank" rel="noopener">dongweiming/r</a>，这个项目后端代码和p是相同的，只是前端使用React重写了，代码也更加清晰，有兴趣可以看看小明老师对这个项目的<a href="http://dongwm.com/archives/r-shang-chuan-wen-jian-fu-wu/" target="_blank" rel="noopener">介绍</a>。</p><a id="more"></a><p>由于之前在豆瓣写过一些Rexxar的前端页面，对于React有种莫名的好感，于是花两个晚上顺手优化了r中的几个问题，具体改动可以看我这个 <a href="https://github.com/dongweiming/r/pull/6" target="_blank" rel="noopener">PR</a>。</p><p>现在最新版已经部署到了我的个人站点 <a href="http://p.yimu.me" target="_blank" rel="noopener">http://p.yimu.me</a> ，他大概长这个样子：</p><p><img src="/image/15171212373275.jpg" alt></p><p><img src="/image/15171214712870.jpg" alt></p><p><img src="/image/15171212780970.jpg" alt></p><p>欢迎使用!</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一种移动应用Http请求的加密方法——以Android为例</title>
      <link href="/2018/01/02/%E4%B8%80%E7%A7%8D%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8Http%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8A%A0%E5%AF%86%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E4%BB%A5Android%E4%B8%BA%E4%BE%8B/"/>
      <url>/2018/01/02/%E4%B8%80%E7%A7%8D%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8Http%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8A%A0%E5%AF%86%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E4%BB%A5Android%E4%B8%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>现阶段移动应用主要通过Restful API请求的方式与后端进行交互，这就导致了不少问题。客户端的请求可能通过各种的方式被破解，比如抓包，反编译等。由此服务端将会面临巨大的安全风险，造成被恶意攻击，服务过载瘫痪，数据泄密等问题。</p><p>当然，规避问题的方式有很多，如升级https，服务端做IP请求次数限制，请求加密验证等等。本文以Android移动端为例介绍一种请求加密的方式，能够有效的在服务端和客户端间进行加密鉴权，确保请求合法性，降低服务端的安全风险。</p><a id="more"></a><h2 id="以APK签名为密钥"><a href="#以APK签名为密钥" class="headerlink" title="以APK签名为密钥"></a>以APK签名为密钥</h2><p>无论对称非对称加密，都逃离不了密钥体系，如何寻找一个安全可靠的密钥成了重中之重。回望Android的打包过程中，APK签名是相对最安全，无法被伪造破解的一个私钥，因此我们把目光放到了它身上。毫无疑问的，Android系统也给应用内部提供了获取签名的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getApkSignature</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取apk签名做密钥</span></span><br><span class="line">        PackageInfo packageInfo = context.getPackageManager().getPackageInfo(</span><br><span class="line">               context.getPackageName(), PackageManager.GET_SIGNATURES);</span><br><span class="line">        String password = Base64.encodeToString(packageInfo.signatures[<span class="number">0</span>].toByteArray(),</span><br><span class="line">               Base64.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>为了可读性考虑，这里的签名取出后使用Base64进行编码</em></p><h2 id="AES加解密"><a href="#AES加解密" class="headerlink" title="AES加解密"></a>AES加解密</h2><p>AES的英文为Advanced Encryption Standard，高级加密标准，是美国政府采用的一种加密标准。在密码学当中又称作为RIJNDAEL算法，这是一种密码长度与数据块长度都可以变化的分组分组加密算法，这个标准由于安全、性能好、效率高、实用、灵活而被用来替代原先的DES，已经被多方分析且广为全世界所使用。AES是现代的<strong>对称</strong>加密算法，通常的实现是使用128位加密。</p><p>在Java标准库中，也已经给出了AES的算法实现。方便使用，本文对AES做了一下简单封装：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AES</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IV = <span class="string">"CUSTOMGIVEDAPPIV"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Encrypt string to string with password</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rawData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">encrypt</span><span class="params">(String rawData, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SecretKeySpec key = generateKey(password);</span><br><span class="line">            <span class="keyword">byte</span>[] result = doEncrypt(key, rawData.getBytes());</span><br><span class="line">            <span class="keyword">return</span> Base64.encodeToString(result, Base64.DEFAULT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> rawData;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">decrypt</span><span class="params">(String cipherData, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SecretKeySpec key = generateKey(password);</span><br><span class="line">            <span class="keyword">byte</span>[] enc = Base64.decode(cipherData, Base64.DEFAULT);</span><br><span class="line">            <span class="keyword">byte</span>[] result = doDecrypt(key, enc);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Log.i(<span class="string">"xxx"</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> cipherData;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SecretKeySpec <span class="title">generateKey</span><span class="params">(String password)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</span><br><span class="line">            password = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="number">16</span>);</span><br><span class="line">        sb.append(password);</span><br><span class="line">        <span class="keyword">while</span> (sb.length() &lt; <span class="number">16</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">"\0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sb.length() &gt; <span class="number">16</span>) &#123;</span><br><span class="line">            sb.setLength(<span class="number">16</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            data = sb.toString().getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SecretKeySpec(data, <span class="string">"AES"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES  加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   AES 加密的KEY</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clear AES 加密的内容 （128位的明文）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回 128位的密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] doEncrypt(SecretKeySpec key, <span class="keyword">byte</span>[] clear) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"AES/CBC/PKCS5Padding"</span>);</span><br><span class="line">        IvParameterSpec ivspec = <span class="keyword">new</span> IvParameterSpec(IV.getBytes());</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, key, ivspec);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(clear);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES  解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key       AES 解密的KEY</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encrypted AES 解密的内容 （128位的密文）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回 （128位的明文）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] doDecrypt(SecretKeySpec key, <span class="keyword">byte</span>[] encrypted) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"AES/CBC/PKCS5Padding"</span>);</span><br><span class="line">        IvParameterSpec ivspec = <span class="keyword">new</span> IvParameterSpec(IV.getBytes());</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, key, ivspec);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(encrypted);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>代码中的<code>IV</code>指的是偏移常量，最少需要16个字节的长度，你们可以根据喜好自行定义它的值</em></p><h2 id="apikey，apisecret和token"><a href="#apikey，apisecret和token" class="headerlink" title="apikey，apisecret和token"></a>apikey，apisecret和token</h2><p>在Restful后台服务中，通常会设计apikey，apisecret和token这三个值，他们在用户身份验证中扮演着不同的作用：</p><ul><li>apikey: 颁发给应用或者机构的密钥，用于标明应用或者机构的身份，相当于用户名，保密等级低</li><li>apisecret：颁发给客户端的私钥，用于对请求进行签名，服务端可以对签名验证其合法性，保密等级高</li><li>token：通常指Access token，即用户私钥，在每个用户登录之后自动生成，用于验证登录用户的身份，存在过期时间，保密等级高</li></ul><h2 id="加密apikey和apisecret"><a href="#加密apikey和apisecret" class="headerlink" title="加密apikey和apisecret"></a>加密apikey和apisecret</h2><p>为了安全性考虑，我们不能直接将apikey和apisecret写在客户端中，这样的常量字符串极有可能被反编译破解。利用上面提到的APK签名和AES加解密算法，很容易想到可以使用他们对密钥进行加密，从而在代码中只存储加密后的apikey和apisecret。当应用启动后，读取APK签名并解密密钥。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取加密结果（打包前操作）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 获取apk签名做密钥</span></span><br><span class="line">      PackageInfo packageInfo = context.getPackageManager().getPackageInfo(</span><br><span class="line">              context.getPackageName(), PackageManager.GET_SIGNATURES);</span><br><span class="line">      String password = Base64.encodeToString(packageInfo.signatures[<span class="number">0</span>].toByteArray(),</span><br><span class="line">              Base64.DEFAULT);</span><br><span class="line">      <span class="comment">// 用签名解密出api key</span></span><br><span class="line">      Log.d(TAG, <span class="string">"Encrypted apikey="</span> + AES.encrypt(<span class="string">"thisisapikey"</span>, password));</span><br><span class="line">      <span class="comment">// G6t3IHRvM6GQ28RZ3RFojQ==</span></span><br><span class="line">      Log.d(TAG, <span class="string">"Encrypted apisecret="</span> + AES.encrypt(<span class="string">"thisisapisecret"</span>, password));</span><br><span class="line">      <span class="comment">// vtZn+Kmt+wK4zy9xSjrlqg==</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密密钥（启动后操作）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENCRYPTED_API_KEY = <span class="string">"G6t3IHRvM6GQ28RZ3RFojQ=="</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENCRYPTED_API_SECRET = <span class="string">"vtZn+Kmt+wK4zy9xSjrlqg=="</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initKey</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">   PackageInfo packageInfo = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">// 获取apk签名做密钥</span></span><br><span class="line">       packageInfo = context.getPackageManager().getPackageInfo(</span><br><span class="line">               context.getPackageName(), PackageManager.GET_SIGNATURES);</span><br><span class="line">       String password = Base64.encodeToString(packageInfo.signatures[<span class="number">0</span>].toByteArray(),</span><br><span class="line">               Base64.DEFAULT);</span><br><span class="line">       <span class="comment">// 用签名解密出api key</span></span><br><span class="line">       mApiKey = AES.decrypt(ENCRYPTED_API_KEY, password);</span><br><span class="line">       mApiSecret = AES.decrypt(ENCRYPTED_API_SECRET, password);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一重验证：apikey-token验证"><a href="#一重验证：apikey-token验证" class="headerlink" title="一重验证：apikey + token验证"></a>一重验证：apikey + token验证</h2><p>在请求中添加apikey和Access token，服务端对二者做简单验证。其中，<br>apikey：请求中apikey的添加没有硬性规定，不过一般放在query参数中即可。<br>token：OAuth标准规范中，通常是在请求Header中加入Authorization字段，值为<code>Bearer xxx</code>。</p><h2 id="二重验证：校验请求签名合法性"><a href="#二重验证：校验请求签名合法性" class="headerlink" title="二重验证：校验请求签名合法性"></a>二重验证：校验请求签名合法性</h2><p>如果apikey和token遭遇泄露，上面的验证方式将不再是安全的。因此很有必要添加第二重验证，需要注意的是，这里的验证方式不是唯一的，只需客户端和服务端协商好即可。抛玉引转，先简单介绍一种校验方式：</p><p>简而言之，就是在请求参数里加上签名摘要参数，这个签名由以下部分构成：请求方式+资源路径+token+时间戳，即<br><code>{GET|POST}&amp;{PATH}&amp;{TOKEN}&amp;{TIMESTAMP}</code>。拼接得到的结果再使用apisecret私钥进行hmac哈希计算，得到摘要字符串，连同时间戳附带在请求参数里。后端收到请求后做同样的运算，如果摘要相同说明这个请求是合法的，缺少摘要或者不符则为非法请求。上述算法的客户端实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算签名信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Pair&lt;String, String&gt; <span class="title">getRequestSignature</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">null</span> == request) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   String apiSecret = Api.get().apiSecret();</span><br><span class="line">   <span class="keyword">if</span> (TextUtils.isEmpty(apiSecret)) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">final</span> StringBuilder s = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">   s.append(request.method());</span><br><span class="line">   String path = request.url().encodedPath();</span><br><span class="line">   <span class="keyword">if</span> (path == <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   path = Uri.decode(path);</span><br><span class="line">   <span class="keyword">if</span> (path == <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (path.endsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">       path = path.substring(<span class="number">0</span>, path.length() - <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   s.append(<span class="string">"&amp;"</span>).append(Uri.encode(path));</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 获取token</span></span><br><span class="line">   String accessToken = request.header(Http.HEADER_AUTHORIZATION);</span><br><span class="line">   <span class="keyword">if</span> (!TextUtils.isEmpty(accessToken)) &#123;</span><br><span class="line">       accessToken = accessToken.substring(OAUTH_PREFIX.length());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (!TextUtils.isEmpty(accessToken)) &#123;</span><br><span class="line">       s.append(<span class="string">"&amp;"</span>).append(accessToken);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">final</span> <span class="keyword">long</span> timestamp = System.currentTimeMillis() / <span class="number">1000</span>;</span><br><span class="line">   s.append(<span class="string">"&amp;"</span>).append(timestamp);</span><br><span class="line">   String baseString = s.toString();</span><br><span class="line">   String signature = HMACHash1.encode(apiSecret, baseString);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Pair&lt;&gt;(signature, String.valueOf(timestamp));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例项目"><a href="#示例项目" class="headerlink" title="示例项目"></a>示例项目</h2><p>详细的示例代码可以在 <a href="https://github.com/yimun/ApiEncryptDemo" target="_blank" rel="noopener">ApiEncryptDemo</a> 中找到，项目使用OkHttp进行网络通信，基于OkHttp的拦截器实现签名参数的添加。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="http://www.cnblogs.com/luop/p/4334160.html" target="_blank" rel="noopener">密码算法详解——AES</a></li><li><a href="https://ecommerce.shopify.com/c/shopify-apis-and-technology/t/what-is-the-difference-between-api-key-secret-key-and-refresh-token-221034" target="_blank" rel="noopener">What is the difference between API key, Secret Key and Refresh Token?</a></li><li><a href="http://www.cnblogs.com/songhan/archive/2012/07/29/2613898.html" target="_blank" rel="noopener">Hash， MAC，HMAC</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ContentProvider实现跨进程方法调用(RPC)</title>
      <link href="/2017/08/17/%E4%BD%BF%E7%94%A8ContentProvider%E5%AE%9E%E7%8E%B0%E8%B7%A8%E8%BF%9B%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8-RPC/"/>
      <url>/2017/08/17/%E4%BD%BF%E7%94%A8ContentProvider%E5%AE%9E%E7%8E%B0%E8%B7%A8%E8%BF%9B%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8-RPC/</url>
      
        <content type="html"><![CDATA[<p>作为 Android 四大组件之一的 ContentProvider 在应用开发的过程中存在感一直很弱，使用的场景也限于在应用间共享数据。官方推荐我们搭配ContentProvider和数据库进行数据的增删改查，本文提到的用法是把 ContentProvder 当成一个远程过程调用的中介，实现轻量级的进程间通信，这个方法在 WebViewActivity 独立进程的重构过程中被大量使用。</p><h3 id="Manifest-注册"><a href="#Manifest-注册" class="headerlink" title="Manifest 注册"></a>Manifest 注册</h3><p>首先需要在AndroidManifest.xml文件中注册ContentProvider，由于内容提供器只是在应用内部使用不该对外暴露，所以设置属性<code>android:exported=&quot;false&quot;</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:authorities</span>=<span class="string">"$&#123;applicationId&#125;.provider"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:name</span>=<span class="string">".interprocess.InterProcessDataProvider"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:exported</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="ContentProvider-定义"><a href="#ContentProvider-定义" class="headerlink" title="ContentProvider 定义"></a>ContentProvider 定义</h3><p>我们需要在定义时禁用掉数据库增删改查操作，只保留基础的call方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跨进程数据提供者，基于ContentProvider，运行于主进程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterProcessDataProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(@NonNull Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Uri <span class="title">insert</span><span class="params">(@NonNull Uri uri, @Nullable ContentValues values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bundle <span class="title">call</span><span class="params">(@NonNull String method, @Nullable String arg, @Nullable Bundle extras)</span> </span>&#123;</span><br><span class="line">        Processor processor = ProcessorPool.get(method);</span><br><span class="line">        <span class="keyword">return</span> processor == <span class="keyword">null</span> ? <span class="keyword">null</span> : processor.process(arg, extras);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="管理跨进程方法"><a href="#管理跨进程方法" class="headerlink" title="管理跨进程方法"></a>管理跨进程方法</h3><p>上面的代码中出现了一个<code>ProcessorPool</code>,  通过这个类去注册管理所有的跨进程调用方法，相关的类定义如下：<br>Processor.java 定义跨进程调用方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getMethodName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Bundle <span class="title">process</span><span class="params">(@Nullable String arg, @Nullable Bundle extras)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ProcessorManger.java 统一管理某一类别的<code>Processor</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProcessorManager</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Processor&gt; <span class="title">getItems</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ProcessorPool.java 跨进程方法池<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessorPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Processor&gt; sMethodMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Processor <span class="title">get</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sMethodMap.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Processor processor)</span> </span>&#123;</span><br><span class="line">        sMethodMap.put(processor.getMethodName(), processor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(ProcessorManager processors)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Processor item : processors.getItems()) &#123;</span><br><span class="line">            register(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="一个使用的栗子"><a href="#一个使用的栗子" class="headerlink" title="一个使用的栗子"></a>一个使用的栗子</h3><p>下面演示跨进程获取token的方法，注意上面manifest定义时ContentProvider运行在主进程中，也就是获取到的是主进程的数据。</p><p>1.首先定义处理器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取登录用户的token</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> Processor sGetAccessToken = <span class="keyword">new</span> Processor() &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getMethodName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"get_user_token"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Bundle <span class="title">process</span><span class="params">(@Nullable String arg, @Nullable Bundle extras)</span> </span>&#123;</span><br><span class="line">       Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">       <span class="comment">// AccountManger主进程的用户管理</span></span><br><span class="line">       String accessToken = AccountManager.getInstance().getAccessToken();</span><br><span class="line">       <span class="comment">// 通过bundle包装数据</span></span><br><span class="line">       bundle.putString(Constants.KEY_ACCESS_TOKEN, accessToken);</span><br><span class="line">       <span class="keyword">return</span> bundle;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>2.注册：在Application初始化时注册<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ProcessorPool.register(sGetAccessToken);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenLet</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getAccessToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果当前进程是主进程，则使用进程内调用</span></span><br><span class="line">        <span class="keyword">if</span> (InterProcessUtils.isMainProcess) &#123;</span><br><span class="line">            <span class="keyword">return</span> FrodoAccountManager.getInstance().getAccessToken();</span><br><span class="line">        &#125;</span><br><span class="line">        Bundle result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 与manifest中定义的authorities相对应</span></span><br><span class="line">        Uri providerUri = Uri.parse(<span class="string">"content://"</span> + context.getPackageName() + <span class="string">".provider"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = AppContext.getApp().getContentResolver().call(providerUri,</span><br><span class="line">                    <span class="string">"get_user_token"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result.getString(Constants.KEY_ACCESS_TOKEN);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>过去实现类似跨进程获取token字符串一般是使用aidl接口，但是aidl接口的定义十分繁琐，而且这种方式需要启动一个service去管理这些aidl调用。使用ContentProvider的方法优点很明显，使用简单，可以传递任何支持序列化的数据。从上面的代码中我们可以发现，所有方法的调用是同步的，并不支持aidl中的异步callback回调的方式。综上而言，ContentProvider实现RPC适合数据量小且调用简单的同步调用。</p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 消息机制和多线程</title>
      <link href="/2017/06/23/Android-%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2017/06/23/Android-%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>本文首先分析了 Android 中的消息机制和运行原理，然后对于开发中用到的几个常用的官方多线程实现（AsyncTask，HandlerThread，IntentService）的源码做了分析。之后对java标准库中提供的几个线程池及其各自的特点做了分析。最后，阐述了如何设计实现了一个任务队列，可用于日常开发中的异步任务执行。</p><h2 id="消息机制概述"><a href="#消息机制概述" class="headerlink" title="消息机制概述"></a>消息机制概述</h2><p>Android 的消息机制其实就是Handler 的工作机制，在消息机制运行中，Handler，MessageQueue和Looper其实是一个整体。Handler的主要作用是将一个任务切换到某个指定线程中执行。MessageQueue 顾名思义，其内部存储了一组消息，以队列的形式对外提供插入删除操作，内部采用单链表存储。但是MessageQueue就是一个存储单元，不能处理消息。而Looper会以无限循环的方式去查询是否有新的消息，有的话就处理，没有就等待。一个线程的Looper的获取就涉及到了ThreadLocal的概念了，但是UI线程也就是ActivityThread在创建时就会初始化Looper。</p><h2 id="消息机制分析"><a href="#消息机制分析" class="headerlink" title="消息机制分析"></a>消息机制分析</h2><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>ThreadLocal 是一个线程内部的数据存储类，通过他可以在指定的线程中存储数据。当某些数据是以线程为作用域并且不用线程具有不用的数据副本的时候，就可以考虑使用ThreadLocal。</p><p>应用有：</p><ul><li>Looper</li><li>复杂逻辑下的对象传递(如贯穿整个线程执行中的callback)</li></ul><p><strong>使用方式</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ThreadLocal&lt;Boolean&gt; mBooleanThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Boolean&gt;();</span><br></pre></td></tr></table></figure></p><p>虽然在不同的线程中访问的是同一个对象，但是得到的值却是不一样的。</p><a id="more"></a><h3 id="MessageQueue-工作原理"><a href="#MessageQueue-工作原理" class="headerlink" title="MessageQueue 工作原理"></a>MessageQueue 工作原理</h3><p>MessageQueue 内部使用单链表存储数据， 包含两个操作：插入和读取。<br>对应enqueueMessage 和 next，next 内部是一个死循环，如果队列中没有消息，那么next 方法将会阻塞在这里。</p><h3 id="Looper-工作原理"><a href="#Looper-工作原理" class="headerlink" title="Looper 工作原理"></a>Looper 工作原理</h3><p>在Android 的消息机制中扮演着消息循环的角色，它会不断从MessageQueue 中查看是否有新消息，如果有新消息会立即处理，否则就一直阻塞。</p><p>构造方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quiteAllowed)</span> </span>&#123;</span><br><span class="line">    mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed); <span class="comment">// 创建一个消息队列</span></span><br><span class="line">    mThread = Thread.currentThread();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为当前线程创建Looper：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Looper.prepare();</span><br><span class="line">Handler handler = <span class="keyword">new</span> Handler();</span><br><span class="line">Looper.loop(); <span class="comment">// 使消息循环启动</span></span><br></pre></td></tr></table></figure></p><p>loop 方法也是一个死循环，唯一跳出的方式是MessageQueue 的next 方法返回了null，当且仅当Looper的quit方法被调用时。</p><h3 id="Handler-工作原理"><a href="#Handler-工作原理" class="headerlink" title="Handler 工作原理"></a>Handler 工作原理</h3><p>Handler 的工作主要包括消息的发送和接收过程。消息的发送可以通过post的一系列方法和send的一系列方法来实现，post最终也是调用了send。典型的一条发送如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">    MessageQueue queue = mQueue;</span><br><span class="line">    <span class="keyword">if</span> (queue == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> booean <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">    msg.target  = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (mAsyncronous) &#123;</span><br><span class="line">        msg.setAsynchornous(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Handler 的发送仅仅是往消息队列中插入了一条消息，那么MessageQueue的next方法就会把这条消息返回给Looper， Looper接收到这条消息后就开始处理了。最终消息由Looper交由Handler的dispatchMessage 方法处理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">        handleCallback(msg); <span class="comment">// 即post时指定的calllback</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123; <span class="comment">// 构建Handler 时所创建的callback</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        handleMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中mCallback是用来创建一个Handler的实例但是不需要派生Handler的子类。在日常开发中，创建Handler的常用方式是派生子类并实现handleMessage方法，来看下mCallback的定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Handler 可以指定Looper来构建，但是在一个没有Looper的线程中创建Handler时，将抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">   mLooper = Looper.myLooper(); <span class="comment">//获取当前线程的Looper</span></span><br><span class="line">   <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">           <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   mQueue = mLooper.mQueue;</span><br><span class="line">   mCallback = callback;</span><br><span class="line">   mAsynchronous = async;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h2><ul><li>封装了Thread和Handler</li><li>AsyncTask对象必须在主线程中创建</li><li>execute 方法必须在UI线程调用</li><li>只能执行一次</li><li>Android 1.6 之前是串行执行任务的，1.6-3.0是线程池中执行，但3.0之后又采用了一个线程来串行执行任务。</li><li>如果需要并行，可以使用executeOnExecutor方法</li></ul><p>在AsyncTask中使用的串行排队器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">   <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</span><br><span class="line">   Runnable mActive;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</span><br><span class="line">       mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   r.run();</span><br><span class="line">               &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                   scheduleNext();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</span><br><span class="line">           scheduleNext();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           THREAD_POOL_EXECUTOR.execute(mActive);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SerialExecutor 用于任务的排队，而线程池 THREAD_POOL_EXECUTOR 用于真正执行任务。所以本质上还是串行的。</p><p>THREAD_POOL_EXECUTOR的初始化如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 核心线程数2-4</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = Math.max(<span class="number">2</span>, Math.min(CPU_COUNT - <span class="number">1</span>, <span class="number">4</span>));</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE_SECONDS = <span class="number">30</span>;</span><br><span class="line">ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">      CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,</span><br><span class="line">      sPoolWorkQueue, sThreadFactory);</span><br><span class="line">threadPoolExecutor.allowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">THREAD_POOL_EXECUTOR = threadPoolExecutor;</span><br></pre></td></tr></table></figure></p><p>具体的源码分析看</p><h2 id="HandlerThread"><a href="#HandlerThread" class="headerlink" title="HandlerThread"></a>HandlerThread</h2><p>内置了Handler的线程，核心代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    Looper mLooper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Call back method that can be explicitly overridden if needed to execute some</span></span><br><span class="line"><span class="comment">     * setup before Looper loops.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLooperPrepared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mTid = Process.myTid();</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            mLooper = Looper.myLooper();</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">        Process.setThreadPriority(mPriority);</span><br><span class="line">        onLooperPrepared();</span><br><span class="line">        Looper.loop();</span><br><span class="line">        mTid = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h2><p>官方封装的后台Service。封装了HandlerThread和Handler，后台任务在HandlerThread中被执行，onStart方法中将消息传递给HandlerThread执行。</p><p><strong>核心实现：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">IntentService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Looper mServiceLooper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> ServiceHandler mServiceHandler;</span><br><span class="line">    <span class="keyword">private</span> String mName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mRedelivery;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ServiceHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(looper);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            onHandleIntent((Intent)msg.obj);</span><br><span class="line">            stopSelf(msg.arg1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"IntentService["</span> + mName + <span class="string">"]"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        mServiceLooper = thread.getLooper();</span><br><span class="line">        mServiceHandler = <span class="keyword">new</span> ServiceHandler(mServiceLooper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(@Nullable Intent intent, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        Message msg = mServiceHandler.obtainMessage();</span><br><span class="line">        msg.arg1 = startId;</span><br><span class="line">        msg.obj = intent;</span><br><span class="line">        mServiceHandler.sendMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mServiceLooper.quit();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is invoked on the worker thread with a request to process.</span></span><br><span class="line"><span class="comment">     * Only one Intent is processed at a time, but the processing happens on a</span></span><br><span class="line"><span class="comment">     * worker thread that runs independently from other application logic.</span></span><br><span class="line"><span class="comment">     * So, if this code takes a long time, it will hold up other requests to</span></span><br><span class="line"><span class="comment">     * the same IntentService, but it will not hold up anything else.</span></span><br><span class="line"><span class="comment">     * When all requests have been handled, the IntentService stops itself,</span></span><br><span class="line"><span class="comment">     * so you should not call &#123;<span class="doctag">@link</span> #stopSelf&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> intent The value passed to &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     *               android.content.Context#startService(Intent)&#125;.</span></span><br><span class="line"><span class="comment">     *               This may be null if the service is being restarted after</span></span><br><span class="line"><span class="comment">     *               its process has gone away; see</span></span><br><span class="line"><span class="comment">     *               &#123;<span class="doctag">@link</span> android.app.Service#onStartCommand&#125;</span></span><br><span class="line"><span class="comment">     *               for details.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@WorkerThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(@Nullable Intent intent)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Android中的线程池"><a href="#Android中的线程池" class="headerlink" title="Android中的线程池"></a>Android中的线程池</h2><h3 id="线程池的优点"><a href="#线程池的优点" class="headerlink" title="线程池的优点"></a>线程池的优点</h3><ol><li>重用线程池中的线程，避免因为线程创建和销毁带来的性能开销</li><li>能够有效控制线程池的最大并发数，避免大量线程之间因为互相抢占系统资源而导致的阻塞现象。</li><li>对线程进行简单管理，并提供定时执行以及指定间隔循环执行等功能。</li></ol><h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><p>构造方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">int</span> corePoolSize, // 核心线程数</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">int</span> maximumPoolSize, // 最大线程数</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">long</span> keepAliveTime, // 非核心线程的闲置时长，超过回收</span></span></span><br><span class="line"><span class="function"><span class="params">     TimeUnit unit, // 指定keepAliveTime的单位</span></span></span><br><span class="line"><span class="function"><span class="params">     BlockingQueue&lt;Runnable&gt; workQueue, // 任务队列</span></span></span><br><span class="line"><span class="function"><span class="params">     ThreadFactory threadFactory, // 线程工厂</span></span></span><br><span class="line"><span class="function"><span class="params">     RejectedExecutionHandler handler)</span></span>;</span><br></pre></td></tr></table></figure></p><h3 id="线程池的的分类"><a href="#线程池的的分类" class="headerlink" title="线程池的的分类"></a>线程池的的分类</h3><h4 id="FixedThreadPool"><a href="#FixedThreadPool" class="headerlink" title="FixedThreadPool"></a>FixedThreadPool</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class="line">                <span class="keyword">new</span> CounterThreadFactory(name));</span><br></pre></td></tr></table></figure><ul><li>线程数量固定，只有核心线程且不会被回收</li><li>能快速相应外部的请求。</li><li>没有超时限制</li><li>任务队列大小没有限制</li></ul><h4 id="CachedThreadPool"><a href="#CachedThreadPool" class="headerlink" title="CachedThreadPool"></a>CachedThreadPool</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;(),</span><br><span class="line">                <span class="keyword">new</span> CounterThreadFactory(name));</span><br></pre></td></tr></table></figure><ul><li>没有核心线程</li><li>相当于一个空集合，最大线程数没有限制</li><li>超时60s</li><li>适合大量且耗时较少的任务</li><li>SynchronousQueue可以看作一个无法存储元素的队列</li></ul><h4 id="ScheduledThreadPool"><a href="#ScheduledThreadPool" class="headerlink" title="ScheduledThreadPool"></a>ScheduledThreadPool</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ThreadPoolExecutor(nThreads, Integer.MAX_VALUE,</span><br><span class="line">                <span class="number">0</span>, TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> DelayedWorkQueue);</span><br></pre></td></tr></table></figure><ul><li>核心线程数固定</li><li>非核心线程数没有限制</li><li>非核心线程空闲时会被立即回收</li><li>主要用于执行定时任务和具有固定周期的重复任务</li></ul><h4 id="SingleThreadPool"><a href="#SingleThreadPool" class="headerlink" title="SingleThreadPool"></a>SingleThreadPool</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class="line">                <span class="keyword">new</span> CounterThreadFactory(name));</span><br></pre></td></tr></table></figure><ul><li>统一外界的任务到同一个线程中按顺序执行</li><li>不存在线程同步问题</li></ul><h2 id="Android-中的任务队列设计"><a href="#Android-中的任务队列设计" class="headerlink" title="Android 中的任务队列设计"></a>Android 中的任务队列设计</h2><p><a href="https://github.com/mcxiaoke/Android-Next/tree/master/task" target="_blank" rel="noopener">Android-Next框架中的task模块</a><br>TODO：未完待续。。。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.zhihu.com/question/34652589" target="_blank" rel="noopener">Android中为什么主线程不会因为Looper.loop()里的死循环卡死？</a></li><li><a href="http://blog.csdn.net/guolin_blog/article/details/9991569" target="_blank" rel="noopener">Android异步消息处理机制完全解析，带你从源码的角度彻底理解——guolin</a></li><li><a href="http://blog.csdn.net/guolin_blog/article/details/11711405" target="_blank" rel="noopener">Android AsyncTask完全解析，带你从源码的角度彻底理解——guolin</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 消息 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> AsyncTask </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android View 事件分发和冲突解决</title>
      <link href="/2017/06/22/Android-View-%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E5%92%8C%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/"/>
      <url>/2017/06/22/Android-View-%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E5%92%8C%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="View-基础知识"><a href="#View-基础知识" class="headerlink" title="View 基础知识"></a>View 基础知识</h2><h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><ul><li>left, right, top, bottom 代表相对于父容器的坐标值</li><li>x, y view在屏幕上的坐标</li><li>translationX, translationY view相对于父容器的偏移量 </li><li>view 在平移时，top和left表示原始的左上角的位置信息，不会发生改变。</li></ul><h3 id="MotionEvent"><a href="#MotionEvent" class="headerlink" title="MotionEvent"></a>MotionEvent</h3><ul><li>触摸事件，包含<code>ACTION_DWON</code>, <code>ACTION_MOVE</code>, <code>ACTION_UP</code></li><li>getX, getY 返回相对于当前View的坐上角的x和y的坐标</li><li>getRawX, getRawY 返回相对于手机屏幕左上角的x和y坐标</li></ul><h3 id="TouchSlop"><a href="#TouchSlop" class="headerlink" title="TouchSlop"></a>TouchSlop</h3><p>可以被识别出的最小滑动距离<br><strong>获取方式</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ViewConfiguration.get(getContext()).getScaledTouchSlop();</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="VelocityTracker"><a href="#VelocityTracker" class="headerlink" title="VelocityTracker"></a>VelocityTracker</h3><p>追踪滑动中的速度</p><h3 id="GestureDetector"><a href="#GestureDetector" class="headerlink" title="GestureDetector"></a>GestureDetector</h3><p>分析MotionEvent， 监听长按，双击等复杂手势操作。</p><h3 id="Scroller"><a href="#Scroller" class="headerlink" title="Scroller"></a>Scroller</h3><p>平滑滚动相关</p><h2 id="View事件分发"><a href="#View事件分发" class="headerlink" title="View事件分发"></a>View事件分发</h2><p>事件分发简而言之：以隧道的方式自顶向下分发，以冒泡的方式自底向上消费。</p><h3 id="View-不处理事件流程"><a href="#View-不处理事件流程" class="headerlink" title="View 不处理事件流程"></a>View 不处理事件流程</h3><p><img src="/image/14983768154302.jpg" alt></p><h3 id="View处理事件流程"><a href="#View处理事件流程" class="headerlink" title="View处理事件流程"></a>View处理事件流程</h3><p><img src="/image/14983919951034.jpg" alt></p><h3 id="情景分析"><a href="#情景分析" class="headerlink" title="情景分析"></a>情景分析</h3><p>假如有以下布局：<br>ViewGroup1<br>ViewGroup2<br>ChildView<br>在一组TouchEvent中可能出现的情况：<br>没有View或ViewGroup消费ACTION_DOWN事件，则TouchEvent的传递路径会是：<br>ACTION_DOWN : ViewGroup1.onInterceptTouchEvent —&gt; ViewGroup2.onInterceptTouchEvent —&gt; ChildView.onTouchEvent —&gt; ViewGroup2.onTouchEvent —&gt; ViewGroup1.onTouchEvent<br>因为没有消费ACTION_DOWN事件，后续的TouchEvent不再传递。 </p><p>ViewGroup2拦截且消费了ACTION_DOWN事件，则TouchEvent的传递路径会是：<br>ACTION_DOWN : ViewGroup1.onInterceptTouchEvent —&gt; ViewGroup2.onInterceptTouchEvent —&gt; ViewGroup2.onTouchEvent ;<br>ACTION_MOVE : ViewGroup1.onInterceptTouchEvent —&gt; ViewGroup2.onTouchEvent ;<br>ACTION_MOVE : ViewGroup1.onInterceptTouchEvent —&gt; ViewGroup2.onTouchEvent ;<br>也即后续的TouchEvent都传递给了ViewGroup2 </p><p>ViewGroup2拦截了ACTION_DOWN事件但不消费，而ViewGroup1消费了该TouchEvent，则TouchEvent的传递路径会是：<br>ACTION_DOWN : ViewGroup1.onInterceptTouchEvent —&gt; ViewGroup2.onInterceptTouchEvent —&gt; ViewGroup2.onTouchEvent —&gt; ViewGroup1.onTouchEvent ;<br>ACTION_MOVE : ViewGroup1.onTouchEvent ;<br>ACTION_MOVE : ViewGroup1.onTouchEvent ;<br>也即后续的TouchEvent都传递给了ViewGroup1 </p><p>ChildView先消费了ACTION_DOWN事件，然后满足一定条件时ViewGroup2拦截了TouchEvent，此时无论ViewGroup2是否消费该TouchEvent，TouchEvent的传递路径是：<br>ViewGroup1.onInterceptTouchEvent —&gt; ViewGroup2.onInterceptTouchEvent —&gt; ChildView.onTouchEvent ;<br>ACTION_MOVE : ViewGroup1.onInterceptTouchEvent —&gt; ViewGroup2.onInterceptTouchEvent —&gt; ChildView.onTouchEvent ；<br>ACTION_MOVE : ViewGroup1.onInterceptTouchEvent —&gt; ViewGroup2.onInterceptTouchEvent &amp;&amp; ACTION_CANCEL : ChildView.onTouchEvent ;<br>ACTION_MOVE : ViewGroup1.onInterceptTouchEvent —&gt; ViewGroup2.onTouchEvent ;<br>ACTION_MOVE : ViewGroup1.onInterceptTouchEvent —&gt; ViewGroup2.onTouchEvent ;<br>也即后续的TouchEvent都传递给了ViewGroup2的onTouchEvent，且无论ViewGroup2是否消费该TouchEvent</p><h2 id="滑动事件冲突"><a href="#滑动事件冲突" class="headerlink" title="滑动事件冲突"></a>滑动事件冲突</h2><ul><li>场景1——外部滑动方向和内部滑动方向不一致</li><li>场景2——外部滑动方向和内部滑动方向一致</li><li>场景3——上面两种情况的嵌套</li></ul><h3 id="基本处理方法"><a href="#基本处理方法" class="headerlink" title="基本处理方法"></a>基本处理方法</h3><h4 id="外部拦截法"><a href="#外部拦截法" class="headerlink" title="外部拦截法"></a>外部拦截法</h4><p>重写父容器的<code>onInterceptTouchEvent</code>方法，在特定条件下才进行拦截。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> intercepted = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> x = event.getX();</span><br><span class="line">    <span class="keyword">int</span> y = event.getY();</span><br><span class="line">    <span class="keyword">switch</span>(event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DWON:</span><br><span class="line">            intercepted = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            intercepted = [判断条件];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            intercepted = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mLastXIntercept = x;</span><br><span class="line">    mLastYintercept = y;</span><br><span class="line">    <span class="keyword">return</span> intercepted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键点：</p><ul><li>ACTION_DOWN必须返回false，因为父容器一旦拦截了了ACTION_DOWN 后续的事件将不会传递到onInterceptTouchEvent，直接交给onTouchEvent处理了</li><li>ACTION_UP 也需要返回false，因为如果父容器返回了true，那么子元素将收不到这个事件，子元素的onClick将无法触发。</li></ul><h4 id="内部拦截法"><a href="#内部拦截法" class="headerlink" title="内部拦截法"></a>内部拦截法</h4><p>父容器不拦截，所有的事件都传给子元素，配合<code>requestDisallowInterceptTouchEvent</code>来工作。<br>重写子元素的<code>dispatchTouchEvent</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = event.getX();</span><br><span class="line">    <span class="keyword">int</span> y = event.getY();</span><br><span class="line">    <span class="keyword">switch</span>(event.getAction()) &#123;</span><br><span class="line">    <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">        parent.requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">        <span class="keyword">int</span> deltaX = x - mLastX;</span><br><span class="line">        <span class="keyword">int</span> deltaY = y - mLastY;</span><br><span class="line">        <span class="keyword">if</span> (父容器需要此事件) &#123;</span><br><span class="line">            parent.requestDisallowInterceptTouchEvent(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mLastX = x;</span><br><span class="line">    mLastY = y;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外，父元素也要做一些处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="http://blog.csdn.net/phelovhl/article/details/8989910" target="_blank" rel="noopener">安卓-MotionEvent之ACTION_CANCEL</a></li><li><a href="http://p.codekk.com/blogs/detail/54cfab086c4761e5001b253e" target="_blank" rel="noopener">公共技术点之 View 事件传递</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android IPC 笔记</title>
      <link href="/2017/06/22/Android-IPC-%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/06/22/Android-IPC-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>IPC (Inter-Process Comminication) 进程间通信或者跨进程通信</p><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>线程是 CPU 调度的最小单元，拥有有限的系统资源<br>进程一般指一个执行单元，具体为一个程序或者应用</p><h2 id="Android-中的IPC"><a href="#Android-中的IPC" class="headerlink" title="Android 中的IPC"></a>Android 中的IPC</h2><ul><li>在 AndroidManifest.xml 中指定四大组件的 <code>android:process</code> 属性</li><li>Android会为每一个应用分配一个UID，具有相同的UID才能共享data数据</li><li>每个进程运行在一个独立的虚拟机中</li><li>多进程开启后，只要他们之间需要通过内存来共享数据都会失败</li></ul><a id="more"></a><h3 id="多进程后带来的问题"><a href="#多进程后带来的问题" class="headerlink" title="多进程后带来的问题"></a>多进程后带来的问题</h3><ul><li>静态成员和单例模式完全失效</li><li>线程同步机制失效</li><li>SharedPreferences 的<strong>可靠性</strong>下降 （SharedPreference不支持两个进程同时写）</li><li>应用的Application 会多次创建</li></ul><h2 id="IPC基础"><a href="#IPC基础" class="headerlink" title="IPC基础"></a>IPC基础</h2><h3 id="Serializable-接口"><a href="#Serializable-接口" class="headerlink" title="Serializable 接口"></a>Serializable 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User2</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化的时候会把该值写入序列化的文件中，当反序列化的时候检测该值时候匹配</span></span><br><span class="line"><span class="comment">     * 一致时可以序列化成功，不一致时说明类发生了变化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">123456789</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Parcelable-接口"><a href="#Parcelable-接口" class="headerlink" title="Parcelable 接口"></a>Parcelable 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从序列化中的对象中创建原始对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">User</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">        id = in.readString();</span><br><span class="line">        name = in.readString();</span><br><span class="line">        age = in.readInt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前对象的内容描述，如果含有文件描述符，返回1，否则返回0，几乎所有的情况都返回0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成序列化工作</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 将当前对象写入序列化结构当中，其中flags有两种标识，0或者1</span></span><br><span class="line"><span class="comment">     * 为1是标识当前对象需要作为返回值返回，不能立即释放资源，几乎所有情况都为0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> flags</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(@NonNull Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        dest.writeString(id);</span><br><span class="line">        dest.writeString(name);</span><br><span class="line">        dest.writeInt(age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成反序列化的工作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;User&gt; CREATOR = <span class="keyword">new</span> Parcelable.Creator&lt;User&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(in);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> User[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h3><ul><li>跨进程通信方式，可以理解为一种虚拟的物理设备。</li><li>从 Android Framework 层来说，Binder 是 ServiceManager 连接各种Manager和相应 ServiceManager 的桥梁</li><li>从 Android 应用层的角度来说，Binder 是客户端和服务端进行通信的媒介</li></ul><h3 id="AIDL-实现-Demo"><a href="#AIDL-实现-Demo" class="headerlink" title="AIDL 实现 Demo"></a>AIDL 实现 Demo</h3><ul><li>User.aidl 传输交换对象，已实现Parcel接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User.aidl</span></span><br><span class="line"><span class="keyword">package</span> me.yimu.demo.binder;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare any non-default types here with import statements</span></span><br><span class="line">parcelable User;</span><br></pre></td></tr></table></figure><ul><li>IUserManager.aidl 接口协议</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IUserManager.aidl</span></span><br><span class="line"><span class="keyword">package</span> me.yimu.demo.binder;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare any non-default types here with import statements</span></span><br><span class="line"><span class="keyword">import</span> me.yimu.demo.binder.User;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IUserManager</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(in User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>IUserManager.java  Gradle自动生成</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This file is auto-generated.  DO NOT MODIFY.</span></span><br><span class="line"><span class="comment"> * Original file: /Users/linwei/frodo/AndroidDemo/binder/src/main/aidl/me/yimu/demo/binder/IUserManager.aidl</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> me.yimu.demo.binder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserManager</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">IInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Local-side IPC implementation stub class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">me</span>.<span class="title">yimu</span>.<span class="title">demo</span>.<span class="title">binder</span>.<span class="title">IUserManager</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String DESCRIPTOR = <span class="string">"me.yimu.demo.binder.IUserManager"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Construct the stub at attach it to the interface.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Stub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.attachInterface(<span class="keyword">this</span>, DESCRIPTOR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Cast an IBinder object into an me.yimu.demo.binder.IUserManager interface,</span></span><br><span class="line"><span class="comment">         * generating a proxy if needed.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> me.yimu.demo.binder.<span class="function">IUserManager <span class="title">asInterface</span><span class="params">(android.os.IBinder obj)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</span><br><span class="line">            <span class="keyword">if</span> (((iin != <span class="keyword">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> me.yimu.demo.binder.IUserManager))) &#123;</span><br><span class="line">                <span class="keyword">return</span> ((me.yimu.demo.binder.IUserManager) iin);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> me.yimu.demo.binder.IUserManager.Stub.Proxy(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">                <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</span><br><span class="line">                    reply.writeString(DESCRIPTOR);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> TRANSACTION_getUserList: &#123;</span><br><span class="line">                    data.enforceInterface(DESCRIPTOR);</span><br><span class="line">                    java.util.List&lt;me.yimu.demo.binder.User&gt; _result = <span class="keyword">this</span>.getUserList();</span><br><span class="line">                    reply.writeNoException();</span><br><span class="line">                    reply.writeTypedList(_result);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> TRANSACTION_addUser: &#123;</span><br><span class="line">                    data.enforceInterface(DESCRIPTOR);</span><br><span class="line">                    me.yimu.demo.binder.User _arg0;</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="number">0</span> != data.readInt())) &#123;</span><br><span class="line">                        _arg0 = me.yimu.demo.binder.User.CREATOR.createFromParcel(data);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        _arg0 = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">this</span>.addUser(_arg0);</span><br><span class="line">                    reply.writeNoException();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">me</span>.<span class="title">yimu</span>.<span class="title">demo</span>.<span class="title">binder</span>.<span class="title">IUserManager</span> </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> android.os.IBinder mRemote;</span><br><span class="line"></span><br><span class="line">            Proxy(android.os.IBinder remote) &#123;</span><br><span class="line">                mRemote = remote;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mRemote;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getInterfaceDescriptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> DESCRIPTOR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> java.util.List&lt;me.yimu.demo.binder.User&gt; getUserList() <span class="keyword">throws</span> android.os.RemoteException &#123;</span><br><span class="line">                android.os.Parcel _data = android.os.Parcel.obtain();</span><br><span class="line">                android.os.Parcel _reply = android.os.Parcel.obtain();</span><br><span class="line">                java.util.List&lt;me.yimu.demo.binder.User&gt; _result;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">                    mRemote.transact(Stub.TRANSACTION_getUserList, _data, _reply, <span class="number">0</span>);</span><br><span class="line">                    _reply.readException();</span><br><span class="line">                    _result = _reply.createTypedArrayList(me.yimu.demo.binder.User.CREATOR);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    _reply.recycle();</span><br><span class="line">                    _data.recycle();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> _result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(me.yimu.demo.binder.User user)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</span><br><span class="line">                android.os.Parcel _data = android.os.Parcel.obtain();</span><br><span class="line">                android.os.Parcel _reply = android.os.Parcel.obtain();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">                    <span class="keyword">if</span> ((user != <span class="keyword">null</span>)) &#123;</span><br><span class="line">                        _data.writeInt(<span class="number">1</span>);</span><br><span class="line">                        user.writeToParcel(_data, <span class="number">0</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        _data.writeInt(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    mRemote.transact(Stub.TRANSACTION_addUser, _data, _reply, <span class="number">0</span>);</span><br><span class="line">                    _reply.readException();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    _reply.recycle();</span><br><span class="line">                    _data.recycle();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_getUserList = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_addUser = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> java.util.List&lt;me.yimu.demo.binder.User&gt; getUserList() <span class="keyword">throws</span> android.os.RemoteException;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(me.yimu.demo.binder.User user)</span> <span class="keyword">throws</span> android.os.RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Android中IPC的几种方式"><a href="#Android中IPC的几种方式" class="headerlink" title="Android中IPC的几种方式"></a>Android中IPC的几种方式</h2><h3 id="使用bundle"><a href="#使用bundle" class="headerlink" title="使用bundle"></a>使用bundle</h3><ul><li>三大组件（Activity，Service，Receiver）之间的数据传递</li></ul><h3 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h3><h3 id="使用Messengar"><a href="#使用Messengar" class="headerlink" title="使用Messengar"></a>使用Messengar</h3><ul><li>对Binder的一层封装</li><li>Message所能支持的类型就是Messengar所支持的类型</li><li>特点：串行，主要是为了传递消息</li></ul><h3 id="使用AIDL"><a href="#使用AIDL" class="headerlink" title="使用AIDL"></a>使用AIDL</h3><h3 id="使用ContentProvider"><a href="#使用ContentProvider" class="headerlink" title="使用ContentProvider"></a>使用ContentProvider</h3><h3 id="使用Socket"><a href="#使用Socket" class="headerlink" title="使用Socket"></a>使用Socket</h3><h2 id="Binder-线程池"><a href="#Binder-线程池" class="headerlink" title="Binder 线程池"></a>Binder 线程池</h2><p><a href="https://github.com/yimun/AndroidDemo/tree/master/binderpool" target="_blank" rel="noopener">具体参考我的线程池实现</a></p><h2 id="参考学习资料"><a href="#参考学习资料" class="headerlink" title="参考学习资料"></a>参考学习资料</h2><ul><li><a href="https://www.zhihu.com/question/39440766" target="_blank" rel="noopener">为什么 Android 要采用 Binder 作为 IPC 机制？</a></li><li><a href="http://gityuan.com/2015/10/31/binder-prepare/" target="_blank" rel="noopener">Gityuan的binder学习系列</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> IPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode Weekly Contest 35 题解</title>
      <link href="/2017/06/11/Leetcode-Weekly-Contest-35-%E9%A2%98%E8%A7%A3/"/>
      <url>/2017/06/11/Leetcode-Weekly-Contest-35-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>时间：2017/6/4<br>竞赛链接：<a href="https://leetcode.com/contest/leetcode-weekly-contest-35" target="_blank" rel="noopener">https://leetcode.com/contest/leetcode-weekly-contest-35</a></p><a id="more"></a><h1 id="605-Can-Place-Flowers"><a href="#605-Can-Place-Flowers" class="headerlink" title="605. Can Place Flowers"></a><a href="https://leetcode.com/contest/leetcode-weekly-contest-35/problems/can-place-flowers/" target="_blank" rel="noopener">605. Can Place Flowers</a></h1><blockquote><br>Suppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.<br><br>Given a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), and a number <strong>n</strong>, return if <strong>n</strong> new flowers can be planted in it without violating the no-adjacent-flowers rule.<br><br><strong>Example 1:</strong><br><strong>Input:</strong> flowerbed = [1,0,0,0,1], n = 1<br><strong>Output:</strong> True<br><br><strong>Example 2:</strong><br><strong>Input:</strong> flowerbed = [1,0,0,0,1], n = 2<br><strong>Output:</strong> False<br><br><strong>Note:</strong><br>1. The input array won’t violate no-adjacent-flowers rule.<br>2. The input array size is in the range of [1, 20000].<br>3. <strong>n</strong> is a non-negative integer which won’t exceed the input array size.<br></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>计算出数组中最大能摆放的花的数目，再和n值进行比较。</p><p>遍历数组时，记录两个变量：</p><ul><li><code>can</code>: 当前位置是否能摆放花，即前一个位置是否有花，有为<code>false</code></li><li><code>added</code>: 前一个位置的花是不是我们摆放上去的，如果当前位置有花，由于不能相邻，我们需要手动把这个摆放上去的花去掉。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canPlaceFlowers</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; flowerbed, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> can = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">bool</span> added = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : flowerbed) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (added) &#123;</span><br><span class="line">                    cnt--;</span><br><span class="line">                &#125;</span><br><span class="line">                can = <span class="literal">false</span>;</span><br><span class="line">                added = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (can) &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    can = <span class="literal">false</span>;</span><br><span class="line">                    added = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    can = <span class="literal">true</span>;</span><br><span class="line">                    added = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> n &lt;= cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="606-Construct-String-from-Binary-Tree"><a href="#606-Construct-String-from-Binary-Tree" class="headerlink" title="606. Construct String from Binary Tree"></a><a href="https://leetcode.com/contest/leetcode-weekly-contest-35/problems/construct-string-from-binary-tree/" target="_blank" rel="noopener">606. Construct String from Binary Tree</a></h1><blockquote><br>You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.<br>The null node needs to be represented by empty parenthesis pair “()”. And you need to omit all the empty parenthesis pairs that don’t affect the one-to-one mapping relationship between the string and the original binary tree.<br><strong>Example 1:</strong><br><strong>Input:</strong> Binary tree: [1,2,3,4]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     1</span><br><span class="line">   /   \</span><br><span class="line">  2     3</span><br><span class="line"> /    </span><br><span class="line">4</span><br></pre></td></tr></table></figure><br><br><strong>Output:</strong> “1(2(4))(3)”<br><strong>Explanation:</strong> Originallay it needs to be “1(2(4)())(3()())”,<br>but you need to omit all the unnecessary empty parenthesis pairs.<br>And it will be “1(2(4))(3)”.<br><br><strong>Example 2:</strong><br><strong>Input:</strong> Binary tree: [1,2,3,null,4]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   1</span><br><span class="line"> /   \</span><br><span class="line">2     3</span><br><span class="line"> \  </span><br><span class="line">  4</span><br></pre></td></tr></table></figure><br><br><strong>Output:</strong> “1(2()(4))(3)”<br><strong>Explanation:</strong> Almost the same as the first example,<br>except we can’t omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.<br></blockquote><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>构建树的题大部分使用递归算法就可以解决，这题也是。</p><p>唯一需要注意的是，题中提到了<strong>当空括号（空节点）对于树的结构无影响时可以省略</strong>，那么只有一种情况下需要将空括号显示出来：即当左孩子为空但是右孩子不为空时，用<code>()</code>标识左子树。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">tree2str</span><span class="params">(TreeNode* t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!t) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="built_in">stringstream</span> ss;</span><br><span class="line">        ss &lt;&lt; t-&gt;val;</span><br><span class="line">        <span class="keyword">if</span> (t-&gt;left) &#123;</span><br><span class="line">            ss &lt;&lt; <span class="string">"("</span> &lt;&lt; tree2str(t-&gt;left) &lt;&lt; <span class="string">")"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t-&gt;right) &#123;</span><br><span class="line">            ss &lt;&lt; <span class="string">"()"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t-&gt;right) &#123;</span><br><span class="line">            ss &lt;&lt; <span class="string">"("</span> &lt;&lt; tree2str(t-&gt;right) &lt;&lt; <span class="string">")"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ss.str();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"># [<span class="number">609.</span> Find Duplicate File in System](https:<span class="comment">//leetcode.com/contest/leetcode-weekly-contest-35/problems/find-duplicate-file-in-system/)</span></span><br><span class="line"></span><br><span class="line">&lt;blockquote&gt;</span><br><span class="line"></span><br><span class="line">Given a <span class="built_in">list</span> of directory info including directory path, <span class="keyword">and</span> all the files with contents in <span class="keyword">this</span> directory, you need to find out all the groups of duplicate files in the file system in terms of their paths.</span><br><span class="line">A group of duplicate files consists of at least **two** files that have exactly the same content.</span><br><span class="line">A single directory info <span class="built_in">string</span> in the **input** <span class="built_in">list</span> has the following format:</span><br><span class="line">`<span class="string">"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)"</span>`</span><br><span class="line">It means there are **n** files (`f1.txt`, `f2.txt` ... `fn.txt` with content `f1_content`, `f2_content` ... `fn_content`, respectively) in directory `root/d1/d2/.../dm`. Note that n &gt;= <span class="number">1</span> <span class="keyword">and</span> m &gt;= <span class="number">0</span>\. If m = <span class="number">0</span>, it means the directory is just the root directory.</span><br><span class="line">The **output** is a <span class="built_in">list</span> of group of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a <span class="built_in">string</span> that has the following format:</span><br><span class="line">`<span class="string">"directory_path/file_name.txt"</span>`</span><br><span class="line"></span><br><span class="line">**Example <span class="number">1</span>:**</span><br><span class="line">**Input:**</span><br><span class="line">[<span class="string">"root/a 1.txt(abcd) 2.txt(efgh)"</span>, <span class="string">"root/c 3.txt(abcd)"</span>, <span class="string">"root/c/d 4.txt(efgh)"</span>, <span class="string">"root 4.txt(efgh)"</span>]</span><br><span class="line">**Output:**  </span><br><span class="line">[[<span class="string">"root/a/2.txt"</span>,<span class="string">"root/c/d/4.txt"</span>,<span class="string">"root/4.txt"</span>],[<span class="string">"root/a/1.txt"</span>,<span class="string">"root/c/3.txt"</span>]]</span><br><span class="line"></span><br><span class="line">**Note:**</span><br><span class="line"><span class="number">1.</span> No order is required <span class="keyword">for</span> the <span class="keyword">final</span> output.</span><br><span class="line"><span class="number">2.</span> You may assume the directory name, file name <span class="keyword">and</span> file content only has letters <span class="keyword">and</span> digits, <span class="keyword">and</span> the length of file content is in the range of [<span class="number">1</span>,<span class="number">50</span>].</span><br><span class="line"><span class="number">3.</span> The number of files given is in the range of [<span class="number">1</span>,<span class="number">20000</span>].</span><br><span class="line"><span class="number">4.</span> You may assume no files <span class="keyword">or</span> directories share the same name in the same directory.</span><br><span class="line"><span class="number">5.</span> You may assume each given directory info represents a unique directory. Directory path <span class="keyword">and</span> file info are separated by a single blank space.</span><br><span class="line"></span><br><span class="line">**Follow-up beyond contest:**</span><br><span class="line"><span class="number">1.</span> Imagine you are given a real file system, how will you search files? DFS <span class="keyword">or</span> BFS?</span><br><span class="line"><span class="number">2.</span> If the file content is very large (GB level), how will you modify your solution?</span><br><span class="line"><span class="number">3.</span> If you can only read the file by <span class="number">1</span>kb each time, how will you modify your solution?</span><br><span class="line"><span class="number">4.</span> What is the time complexity of your modified solution? What is the most time-consuming part <span class="keyword">and</span> memory consuming part of it? How to optimize?</span><br><span class="line"><span class="number">5.</span> How to make sure the duplicated files you find are <span class="keyword">not</span> <span class="literal">false</span> positive?</span><br><span class="line"></span><br><span class="line">&lt;/blockquote&gt;</span><br><span class="line"></span><br><span class="line">## 思路</span><br><span class="line">sdjfklajsdfasdfjlkd</span><br><span class="line"></span><br><span class="line">## 代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line">class Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; findDuplicate(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; paths) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; res;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">string</span> item : paths) &#123;</span><br><span class="line">            <span class="built_in">istringstream</span> iss(item);</span><br><span class="line">            <span class="built_in">string</span> path;</span><br><span class="line">            iss &gt;&gt; path;</span><br><span class="line">            <span class="keyword">while</span> (iss) &#123;</span><br><span class="line">                <span class="built_in">string</span> sub;</span><br><span class="line">                <span class="built_in">string</span> file, content;</span><br><span class="line">                iss &gt;&gt; sub;</span><br><span class="line">                <span class="keyword">if</span> (sub.size() == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">int</span> first = sub.find_first_of(<span class="string">"("</span>);</span><br><span class="line">                file = sub.substr(<span class="number">0</span>, first);</span><br><span class="line">                content = sub.substr(first + <span class="number">1</span>, sub.find_first_of(<span class="string">")"</span>) - first - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (m.find(content) != m.end()) &#123;</span><br><span class="line">                    m[content].push_back(path + <span class="string">"/"</span> + file);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v = &#123; path + <span class="string">"/"</span> + file &#125;;</span><br><span class="line">                    m[content] = v;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> entry : m) &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; value = entry.second;</span><br><span class="line">            <span class="keyword">if</span> (value.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                res.push_back(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime Text 3 打造简易C++ IDE (算法编写)</title>
      <link href="/2017/05/30/Sublime-Text-3-%E6%89%93%E9%80%A0C-IDE-%E7%AE%97%E6%B3%95%E7%BC%96%E5%86%99/"/>
      <url>/2017/05/30/Sublime-Text-3-%E6%89%93%E9%80%A0C-IDE-%E7%AE%97%E6%B3%95%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>将Sublime Text 3 配置成一个C++ 编辑器，可以编译调试单个文件，用于写算法题或者简单验证。</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol><li>EasyClangComplete，SublimeCodeIntel 自动补全</li><li>SublimeAStyleFormatter 代码格式化</li><li>SublimeLinter，SublimeLinter-contrib-clang Lint检查和错误提示</li></ol><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>新建一个构建系统，输入<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="attr">"cmd"</span>: [<span class="string">"g++"</span>, <span class="string">"-std=c++11"</span>, <span class="string">"$&#123;file&#125;"</span>, <span class="string">"-o"</span>, <span class="string">"$&#123;file_path&#125;/$&#123;file_base_name&#125;.out"</span>], <span class="comment">// For GCC On Windows and Linux</span></span><br><span class="line">     <span class="comment">//"cmd": ["CL", "/Fo$&#123;file_base_name&#125;", "/O2", "$&#123;file&#125;"],     // For CL on Windows Only</span></span><br><span class="line">     <span class="attr">"file_regex"</span>: <span class="string">"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$"</span>,</span><br><span class="line">     <span class="attr">"working_dir"</span>: <span class="string">"$&#123;file_path&#125;"</span>,</span><br><span class="line">     <span class="attr">"selector"</span>: <span class="string">"source.c, source.c++"</span>,</span><br><span class="line"></span><br><span class="line">     <span class="attr">"variants"</span>:</span><br><span class="line">     [</span><br><span class="line">          &#123;</span><br><span class="line">               <span class="attr">"name"</span>: <span class="string">"Run"</span>,</span><br><span class="line">               <span class="attr">"cmd"</span>: [<span class="string">"bash"</span>, <span class="string">"-c"</span>, <span class="string">"g++ -std=c++11 '$&#123;file&#125;' -o '$&#123;file_path&#125;/$&#123;file_base_name&#125;.out' &amp;&amp; '$&#123;file_path&#125;/$&#123;file_base_name&#125;.out'"</span>] </span><br><span class="line">             </span><br><span class="line">          &#125;</span><br><span class="line">     ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>快捷键 <code>Ctrl + B</code></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sublime-Text </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android中的Bundle疑云——拷贝还是引用?</title>
      <link href="/2017/05/26/Android%E4%B8%AD%E7%9A%84Bundle%E7%96%91%E4%BA%91%E2%80%94%E2%80%94%E6%8B%B7%E8%B4%9D%E8%BF%98%E6%98%AF%E5%BC%95%E7%94%A8/"/>
      <url>/2017/05/26/Android%E4%B8%AD%E7%9A%84Bundle%E7%96%91%E4%BA%91%E2%80%94%E2%80%94%E6%8B%B7%E8%B4%9D%E8%BF%98%E6%98%AF%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>众所周知，Android 中的 Bundle 用于组件间的数据传递，数据在其中以键值对的方式保存。其中传递的数据可以是基本类型或者对象类型，其中，通过 Bundle 传递的对象类型必须是可序列化的，即需要实现 <code>Parcelable</code> 或者 <code>Serializable</code> 接口。</p><p>Bundle 为 Android 中的跨进程数据传递带来了极大的方便，通常我们认为，将对象存入 Bundle 是序列化的过程，而取出是反序列化的过程，这意味着取出的对象是原对象的一份深拷贝。然而，实际开发中的一个发现却颠覆了我的认识。这个问题至今在 Google 上没有找到相关的结果，所以打算写篇博客记录一下。<br><a id="more"></a></p><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>故事的缘起来自一个报错，具体的内容是通过 Bundle 传递大对象时发生了异常，原因是 Bundle 对于数据的大小是有<code>1024KB</code>限制的。但深入研究发现，这个错误只出现在 Activity 之间的 Bundle 传递时发生，同样的对象在 Activity 和 Fragment 间传递时却不会出错。难道这其中有什么玄机？</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="Bundle-在-Activity-间的传递"><a href="#Bundle-在-Activity-间的传递" class="headerlink" title="Bundle 在 Activity 间的传递"></a>Bundle 在 Activity 间的传递</h3><p>通过定义两个Activity，并观察在 Bundle 在传递过程中的 hashCode 值的变化。其中第一个Activity 向第二个 Activity 传递一个 <code>User</code> 类型，在第二个 Activity 中改变 <code>User</code> 的值，并观察该值的改变是否影响到上一个页面。</p><p>首先，定义一下传递的数据类型<code>User</code>，实现了 <code>Parcelable</code> 接口:</p><p>User.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">User</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">        name = in.readString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        dest.writeString(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;User&gt; CREATOR = <span class="keyword">new</span> Creator&lt;User&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(in);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> User[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第一个Activity:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView mTextMessage;</span><br><span class="line">    <span class="keyword">private</span> User mUser;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener</span><br><span class="line">            = <span class="keyword">new</span> BottomNavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(@NonNull MenuItem item)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">                <span class="keyword">case</span> R.id.navigation_home:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">case</span> R.id.navigation_dashboard:</span><br><span class="line">                    SecondActivity.start(MainActivity.<span class="keyword">this</span>, mUser);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">case</span> R.id.navigation_notifications:</span><br><span class="line">                    SecondFragment.show(getSupportFragmentManager(), mUser);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        mTextMessage = (TextView) findViewById(R.id.message);</span><br><span class="line">        BottomNavigationView navigation = (BottomNavigationView) findViewById(R.id.navigation);</span><br><span class="line">        navigation.setOnNavigationItemSelectedListener(mOnNavigationItemSelectedListener);</span><br><span class="line"></span><br><span class="line">        mUser = <span class="keyword">new</span> User();</span><br><span class="line">        Log.d(TAG, <span class="string">"User hashCode="</span> + mUser.hashCode());</span><br><span class="line">        mUser.name = <span class="string">"Origin Name"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        updateName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mTextMessage.setText(mUser.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二个Activity：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SecondActivity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Context context, User user)</span> </span>&#123;</span><br><span class="line">        Intent starter = <span class="keyword">new</span> Intent(context, SecondActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        starter.putExtra(<span class="string">"user"</span>, user);</span><br><span class="line">        Log.d(TAG, <span class="string">"Put Bundle hashCode="</span> + starter.getExtras().hashCode());</span><br><span class="line">        context.startActivity(starter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        User user = getIntent().getParcelableExtra(<span class="string">"user"</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"Receive Bundle hashCode="</span> + getIntent().getExtras().hashCode());</span><br><span class="line">        Log.d(TAG, <span class="string">"User hashCode="</span> + user.hashCode());</span><br><span class="line">        user.name = <span class="string">"Second Name"</span>;</span><br><span class="line">        Log.d(TAG, String.format(<span class="string">"Change name to [%1$s]"</span>, user.name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打印日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">05-26 21:26:54.342 25537-25537/me.yimu.bundletest D/MainActivity: User hashCode=19193905</span><br><span class="line">05-26 21:26:57.696 25537-25537/me.yimu.bundletest D/SecondActivity: Put Bundle hashCode=238724848</span><br><span class="line">05-26 21:26:57.751 25537-25537/me.yimu.bundletest D/SecondActivity: Receive Bundle hashCode=13738260    </span><br><span class="line">05-26 21:26:57.751 25537-25537/me.yimu.bundletest D/SecondActivity: User hashCode=30268861</span><br><span class="line">05-26 21:26:57.752 25537-25537/me.yimu.bundletest D/SecondActivity: Change name to [Second Name]</span><br></pre></td></tr></table></figure></p><p>由上面的日志可以看到，Bundle 和 User的 hashCode 在传递前后都发生了变化，说明 Bundle 在通过 Intent 传递时传递的是深拷贝。因此，当使用Intent 传递 Bundle 数据时便有了大小的限制，不宜传递过大的对象，如 Bitmap 等。</p><h3 id="Bundle-在-Fragment-间的传递"><a href="#Bundle-在-Fragment-间的传递" class="headerlink" title="Bundle 在 Fragment 间的传递"></a>Bundle 在 Fragment 间的传递</h3><p>在上面代码的基础上，我们增加一个 <code>SecondFragment.java</code> ,并在fragment销毁时，刷新<code>MainActivity</code> 中的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SecondFragment"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(FragmentManager manager, User user)</span> </span>&#123;</span><br><span class="line">        SecondFragment fragment = <span class="keyword">new</span> SecondFragment();</span><br><span class="line">        Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">        bundle.putParcelable(<span class="string">"user"</span>, user);</span><br><span class="line">        Log.d(TAG, <span class="string">"Put Bundle hashCode="</span> + bundle.hashCode());</span><br><span class="line">        fragment.setArguments(bundle);</span><br><span class="line">        fragment.show(manager, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_second, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        User user = getArguments().getParcelable(<span class="string">"user"</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"Receive Bundle hashCode="</span> + getArguments().hashCode());</span><br><span class="line">        Log.d(TAG, <span class="string">"User hashCode="</span> + user.hashCode());</span><br><span class="line">        user.name = <span class="string">"Second Name"</span>;</span><br><span class="line">        Log.d(TAG, String.format(<span class="string">"Change name to [%1$s]"</span>, user.name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDismiss</span><span class="params">(DialogInterface dialog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDismiss(dialog);</span><br><span class="line">        ((MainActivity) getActivity()).updateName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">05-26 21:27:23.351 25537-25537/me.yimu.bundletest D/MainActivity: User hashCode=25516232</span><br><span class="line">05-26 21:27:24.437 25537-25537/me.yimu.bundletest D/SecondFragment: Put Bundle hashCode=72120544</span><br><span class="line">05-26 21:27:24.447 25537-25537/me.yimu.bundletest D/SecondFragment: Receive Bundle hashCode=72120544</span><br><span class="line">05-26 21:27:24.447 25537-25537/me.yimu.bundletest D/SecondFragment: User hashCode=25516232</span><br><span class="line">05-26 21:27:24.448 25537-25537/me.yimu.bundletest D/SecondFragment: Change name to [Second Name]</span><br></pre></td></tr></table></figure></p><p>神奇的事情发生了， Bundle 和 User 的 hashCode 都未发生改变，并且，在<code>SecondFragment</code> 中的修改影响到了上一个页面！</p><img src="/image/14958053336267.jpg" class="[class names]" width="400"><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>Bundle 的 <code>putParcelable</code> 和 <code>getParcelable</code> 方法并未实际对对象进行序列化反序列化操作，真正的序列化过程发生在 <code>Intent</code> 数据的封装时期，Bundle 连同其中的数据被序列化了，这也体现了通过 Intent 实现 Android 跨进程通信的原理。</p><p>而 Fragment 中的 <code>setArguments</code> 方法只是把 Bundle 传递给了 Fragment ，没有经过 Intent 的封装，所以不会发生序列化与反序列化，传递的只是原数据的引用。</p><h3 id="有啥子用呢？"><a href="#有啥子用呢？" class="headerlink" title="有啥子用呢？"></a>有啥子用呢？</h3><p>你问我有没有用，当然有用啦！首先，Activity 和 Fragment ，或者 Fragment 和 Fragment 之间经常需要做一些数据同步，了解这个特性之后，通过<code>setArguments</code>方法设置参数后，只需要在前个页面重新展示时，比如<code>onResume</code>方法中对数据进行一次重新绑定即可，而不需要设置一些回调或者使用 <code>EventBus</code>，把对象传来传去了。当然，对象的大小也是没有任何限制的。</p><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><p>Q：Fragment 创建时向其传递数据的方式有哪两种？区别是什么？<br>A：可以通过<code>setArguments</code>或者自定义的<code>setXXX</code> 方法设置。前者需要传递的数据都是可序列化的，后者没有限制。并且后者会有一个潜在的问题，当 Fragment 异常销毁时，通过<code>setArguments</code> 保存的 Bundle 数据会自动保存并在重建时恢复，而后者不能，除非手工处理。</p><p>Q：既然<code>setArguments</code> 传递的是引用，那么为啥不直接传递，非得用 Bundle 包装一下。<br>A：原因很简单，因为 Fragment 销毁重建时数据恢复的需要。</p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android, Bundle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Cheatsheet</title>
      <link href="/2017/05/24/Git-Cheatsheet/"/>
      <url>/2017/05/24/Git-Cheatsheet/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一些 Git 使用过程中的小 tips 和配置</p></blockquote><h2 id="bisect"><a href="#bisect" class="headerlink" title="bisect"></a>bisect</h2><p>二分查找问题的引入位置，具体见：<a href="http://timothyqiu.com/archives/git-bisect/" target="_blank" rel="noopener">http://timothyqiu.com/archives/git-bisect/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git bisect start         # 初始化二分查找</span><br><span class="line">git bisect bad           # 标记当前版本存在问题</span><br><span class="line">git bisect good           # 标记当前版没问题</span><br><span class="line">git bisect good 38a63d9  # 标记 38a63d9 版本没有</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="查看修改历史时只显示修改文件"><a href="#查看修改历史时只显示修改文件" class="headerlink" title="查看修改历史时只显示修改文件"></a>查看修改历史时只显示修改文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff --name-only &lt;commit_id1&gt; &lt;commit_id2&gt;</span><br><span class="line">git show --name-only</span><br></pre></td></tr></table></figure><h2 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry pick"></a>cherry pick</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick &lt;commit_id1&gt; &lt;commit_id2&gt;</span><br><span class="line">// 冲突解决</span><br><span class="line">git add .</span><br><span class="line">git ci</span><br></pre></td></tr></table></figure><h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git tag v*** 2bcd97c</span><br><span class="line">//这个就是给2bcd97c的提交打一个标签，用于以后容易区分</span><br><span class="line"></span><br><span class="line">//本地删除标签</span><br><span class="line">git tag -d v****</span><br><span class="line"></span><br><span class="line">//将本地的标签push到服务器</span><br><span class="line">git push origin v*****</span><br><span class="line"></span><br><span class="line">//从服务器端删除标签</span><br><span class="line">git push origin :refs/tags/v****</span><br></pre></td></tr></table></figure><h2 id="删除未跟踪文件"><a href="#删除未跟踪文件" class="headerlink" title="删除未跟踪文件"></a>删除未跟踪文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files --ignored --exclude-standard | xargs git rm --cached</span><br></pre></td></tr></table></figure><h2 id="submodule"><a href="#submodule" class="headerlink" title="submodule"></a>submodule</h2><p><a href="http://www.kafeitu.me/git/2012/03/27/git-submodule.html" target="_blank" rel="noopener">git submodule 完整使用教程</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.gitmodules</span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure></p><h2 id="gitk"><a href="#gitk" class="headerlink" title="gitk"></a>gitk</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gitk // 默认为当前分支的历史</span><br><span class="line">gitk --all</span><br><span class="line">gitk -b master</span><br></pre></td></tr></table></figure><h2 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash (save xxx)</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rebase --abort </span><br><span class="line">git rebase --continue</span><br><span class="line">git rebase -i HEAD~3 // 整理分支历史</span><br></pre></td></tr></table></figure><h2 id="当前分支代码回滚"><a href="#当前分支代码回滚" class="headerlink" title="当前分支代码回滚"></a>当前分支代码回滚</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commit_id&gt;  // commit_id可以是前几位，只要能够区分就行了</span><br><span class="line">git reset --hard &lt;reflog_id&gt;</span><br><span class="line">git reset HEAD^</span><br><span class="line">HEAD  //当前版本</span><br><span class="line">HEAD^ //上一个</span><br><span class="line">HEAD^^ //上一个的上一个</span><br><span class="line">HEAD~100 //往上100个</span><br><span class="line"></span><br><span class="line">//设置当前分支的默认跟踪分支</span><br><span class="line">git branch --set-upstream-to=upstream/master</span><br></pre></td></tr></table></figure><h2 id="Git-Alias"><a href="#Git-Alias" class="headerlink" title="Git Alias"></a>Git Alias</h2><p>我的一些 git 别名命令，简化操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">lg = log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit</span><br><span class="line">ci = commit</span><br><span class="line">cn = commit --amend --no-edit</span><br><span class="line">st = status</span><br><span class="line">co = checkout</span><br><span class="line">br = branch</span><br><span class="line">ec = config --global -e</span><br><span class="line">cp = cherry-pick</span><br><span class="line">rb = rebase</span><br><span class="line">up = pull --rebase upstream</span><br><span class="line">su = submodule</span><br><span class="line">re = remote</span><br><span class="line">fc = fetch</span><br><span class="line">rh = reset --hard</span><br><span class="line">throw = reset --hard HEAD</span><br></pre></td></tr></table></figure></p><h2 id="删除远端分支"><a href="#删除远端分支" class="headerlink" title="删除远端分支"></a>删除远端分支</h2><p><a href="http://zengrong.net/post/1746.htm" target="_blank" rel="noopener">Git查看、删除、重命名远程分支和tag</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete &lt;branch_name&gt;</span><br><span class="line">git push origin :&lt;branchName&gt;</span><br></pre></td></tr></table></figure></p><h2 id="修正上次提交"><a href="#修正上次提交" class="headerlink" title="修正上次提交"></a>修正上次提交</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h2 id="解决本地修改和服务器修改的冲突："><a href="#解决本地修改和服务器修改的冲突：" class="headerlink" title="解决本地修改和服务器修改的冲突："></a>解决本地修改和服务器修改的冲突：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.本地先commit后pull服务器版     </span><br><span class="line">2.产生冲突，修改冲突</span><br><span class="line">3.本地push最新</span><br></pre></td></tr></table></figure><h2 id="配置用户名密码，免输入"><a href="#配置用户名密码，免输入" class="headerlink" title="配置用户名密码，免输入"></a>配置用户名密码，免输入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim .git-credentials</span><br><span class="line">添加：</span><br><span class="line">https://&#123;username&#125;:&#123;password&#125;@github.com</span><br><span class="line">https://yimun:biyu159@github.com // 这里最好不要用邮箱名，否则@符号会冲突</span><br><span class="line">执行：</span><br><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><h2 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git reset</span><br><span class="line">git reset --soft hashcode</span><br><span class="line">git reset --hard ...</span><br><span class="line">git reset HEAD</span><br><span class="line">git reset HEAD^  </span><br><span class="line"></span><br><span class="line">git reset HEAD~100 //往前100</span><br></pre></td></tr></table></figure><h2 id="reflog"><a href="#reflog" class="headerlink" title="reflog"></a>reflog</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog  // 关键操作记录</span><br></pre></td></tr></table></figure><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><p>清空工作区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -xdf</span><br></pre></td></tr></table></figure></p><hr><p>几个推荐网址：</p><ul><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰git教程网址</a></li><li><a href="http://gitref.org/zh/creating/" target="_blank" rel="noopener">Git 参考手册</a></li><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">The entire Pro Git book</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode Weekly Contest 33 题解</title>
      <link href="/2017/05/21/Leetcode-Weekly-Contest-33-%E9%A2%98%E8%A7%A3/"/>
      <url>/2017/05/21/Leetcode-Weekly-Contest-33-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>时间：2017/5/21<br>竞赛链接：<a href="https://leetcode.com/contest/leetcode-weekly-contest-33" target="_blank" rel="noopener">https://leetcode.com/contest/leetcode-weekly-contest-33</a><br><a id="more"></a></p><h1 id="594-Longest-Harmonious-Subsequence"><a href="#594-Longest-Harmonious-Subsequence" class="headerlink" title="594. Longest Harmonious Subsequence"></a><a href="https://leetcode.com/contest/leetcode-weekly-contest-33/problems/longest-harmonious-subsequence/" target="_blank" rel="noopener">594. Longest Harmonious Subsequence</a></h1><blockquote><br>We define a harmonious array is an array where the difference between its maximum value and its minimum value is <strong>exactly</strong> 1.<br><br>Now, given an integer array, you need to find the length of its longest harmonious subsequence among all its possible <a href="https://en.wikipedia.org/wiki/Subsequence" target="_blank" rel="noopener">subsequences</a>.<br><br><strong>Example 1:</strong><br><strong>Input:</strong> [1,3,2,2,5,2,3,7]<br><strong>Output:</strong> 5<br><strong>Explanation:</strong> The longest harmonious subsequence is [3,2,2,2,3].<br><br><strong>Note:</strong> The length of the input array will not exceed 20,000.<br><br></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>原来以为这是一题动态规划问题，结果发现想复杂了，这里需要注意题目要求的子序列元素的差值是<strong>固定为1</strong>，所以诸如<code>[1,1,1,1]</code>这样的结果是0。</p><p>算法比较简单，用到了map容器：</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findLHS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.find(num) == m.end()) &#123;</span><br><span class="line">                m[num] = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                m[num] = m[num] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mm = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : m) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.find(it.first + <span class="number">1</span>) != m.end()) &#123;</span><br><span class="line">                mm = max(it.second + m[it.first + <span class="number">1</span>] , mm);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>思考题：map容器的定义为啥一定要用<code>long long</code>？</p></blockquote><h1 id="593-Valid-Square"><a href="#593-Valid-Square" class="headerlink" title="593. Valid Square"></a><a href="https://leetcode.com/contest/leetcode-weekly-contest-33/problems/valid-square/" target="_blank" rel="noopener">593. Valid Square</a></h1><blockquote><br>Given the coordinates of four points in 2D space, return whether the four points could construct a square.<br><br>The coordinate (x,y) of a point is represented by an integer array with two integers.<br><br><strong>Example:</strong><br><strong>Input:</strong> p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]<br><strong>Output:</strong> True<br><br>Note:<br>1. All the input integers are in the range [-10000, 10000].<br>2. A valid square has four equal sides with positive length and four equal angles (90-degree angles).<br>3. Input points have no order.<br></blockquote><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>比较简单的几何题，正方形的判断需要<code>菱形+一个角为90度</code>，不再多说。</p><h2 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">validSquare</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; p1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; p2, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; p3, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; p4)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        res.push_back(dis(p1, p2));</span><br><span class="line">        res.push_back(dis(p1, p3));</span><br><span class="line">        res.push_back(dis(p1, p4));</span><br><span class="line">        res.push_back(dis(p2, p3));</span><br><span class="line">        res.push_back(dis(p2, p4));</span><br><span class="line">        res.push_back(dis(p3, p4));</span><br><span class="line">        <span class="keyword">int</span> d1 = res[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> d2 = res[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span> ; i&lt; res.size(); i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res[i] != d1 &amp;&amp; res[i] != d2) &#123;</span><br><span class="line">                d2 = res[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d1 == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res[i] != d1 &amp;&amp; res[i] != d2) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d1 &lt; d2) &#123;</span><br><span class="line">            <span class="keyword">return</span> d1 * <span class="number">2</span> == d2;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> d2 * <span class="number">2</span> == d1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;p1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;p2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>((p1[<span class="number">0</span>] - p2[<span class="number">0</span>]), <span class="number">2</span>) + <span class="built_in">pow</span>((p1[<span class="number">1</span>] - p2[<span class="number">1</span>]), <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="592-Fraction-Addition-and-Subtraction"><a href="#592-Fraction-Addition-and-Subtraction" class="headerlink" title="592. Fraction Addition and Subtraction"></a><a href="https://leetcode.com/contest/leetcode-weekly-contest-33/problems/fraction-addition-and-subtraction/" target="_blank" rel="noopener">592. Fraction Addition and Subtraction</a></h1><blockquote><br>Given a string representing an expression of fraction addition and subtraction, you need to return the calculation result in string format. The final result should be <a href="https://en.wikipedia.org/wiki/Irreducible_fraction" target="_blank" rel="noopener">irreducible fraction</a>. If your final result is an integer, say <code>2</code>, you need to change it to the format of fraction that has denominator <code>1</code>. So in this case, <code>2</code> should be converted to <code>2/1</code>.<br><strong>Example 1:</strong><br><strong>Input:</strong>“-1/2+1/2”<br><strong>Output:</strong> “0/1”<br><br><strong>Example 2:</strong><br><strong>Input:</strong>“-1/2+1/2+1/3”<br><strong>Output:</strong> “1/3”<br><br><strong>Example 3:</strong><br><strong>Input:</strong>“1/3-1/2”<br><strong>Output:</strong> “-1/6”<br><br><strong>Example 4:</strong><br><strong>Input:</strong>“5/3+1/3”<br><strong>Output:</strong> “2/1”<br><br><strong>Note:</strong><br>1. The input string only contains <code>&#39;0&#39;</code> to <code>&#39;9&#39;</code>, <code>&#39;/&#39;</code>, <code>&#39;+&#39;</code> and <code>&#39;-&#39;</code>. So does the output.<br>2. Each fraction (input and output) has format <code>±numerator/denominator</code>. If the first input fraction or the output is positive, then <code>&#39;+&#39;</code> will be omitted.<br>3. The input only contains valid <strong>irreducible fractions</strong>, where the <strong>numerator</strong> and <strong>denominator</strong> of each fraction will always be in the range [1,10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.<br>4. The number of given fractions will be in the range [1,10].<br>5. The numerator and denominator of the <strong>final result</strong> are guaranteed to be valid and in the range of 32-bit int.<br></blockquote><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>分数加减计算问题，这是一题没有多少算法知识含量的题目，但是这题做起来比较繁琐。首先需要解析读取字符串成结构化的数据(分数+操作符)，然后使用分母的最小公倍数对分数进行通分，然后计算得到结果，再用最大公约数进行约分。字符串解析需要注意分子分母的范围是<code>[1,10]</code>，并且别忘了分数是有正负号的。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代码由于时间关系，写得比较乱，后面有时间再整理一下。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fra</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">bool</span> p;</span><br><span class="line">    <span class="keyword">bool</span> slash;</span><br><span class="line"></span><br><span class="line">    Fra() : p(<span class="literal">true</span>), slash(<span class="literal">false</span>), a(<span class="number">0</span>), b(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b &gt; <span class="number">0</span> ? gcd(b, a % b) : a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">fractionAddition</span><span class="params">(<span class="built_in">string</span> expression)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;Fra&gt; fras;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; operas;</span><br><span class="line">        Fra fra;</span><br><span class="line">        <span class="keyword">bool</span> n = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : expression) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'-'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (n) &#123;</span><br><span class="line">                    fra.p = <span class="literal">false</span>;</span><br><span class="line">                    n = <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    operas.push_back(ch);</span><br><span class="line">                    fras.push_back(fra);</span><br><span class="line">                    fra = Fra();</span><br><span class="line">                    n = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'+'</span>) &#123;</span><br><span class="line">                operas.push_back(ch);</span><br><span class="line">                fras.push_back(fra);</span><br><span class="line">                fra = Fra();</span><br><span class="line">                n = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'/'</span>) &#123;</span><br><span class="line">                fra.slash = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                n = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (fra.slash) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fra.b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        fra.b = fra.b * <span class="number">10</span> + (ch - <span class="string">'0'</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        fra.b = ch - <span class="string">'0'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fra.a &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        fra.a = fra.a * <span class="number">10</span> + (ch - <span class="string">'0'</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        fra.a = ch - <span class="string">'0'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fras.push_back(fra);</span><br><span class="line">        <span class="keyword">while</span>(!operas.empty()) &#123;</span><br><span class="line">            Fra fra  = calc(fras[<span class="number">0</span>], fras[<span class="number">1</span>], operas[<span class="number">0</span>]);</span><br><span class="line">            operas.erase(operas.begin());</span><br><span class="line">            fras.erase(fras.begin());</span><br><span class="line">            fras[<span class="number">0</span>] = fra;</span><br><span class="line">        &#125;</span><br><span class="line">        Fra res = fras[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> format(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">format</span><span class="params">(Fra res)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">if</span> (!res.p) s+= <span class="string">'-'</span>;</span><br><span class="line">        s += to_string(res.a);</span><br><span class="line">        s += <span class="string">'/'</span>;</span><br><span class="line">        s += to_string(res.b);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Fra <span class="title">calc</span><span class="params">(Fra &amp;f1, Fra &amp;f2, <span class="keyword">char</span> opera)</span> </span>&#123;</span><br><span class="line">        Fra fra;</span><br><span class="line">        <span class="keyword">int</span> lcm = f1.b * f2.b / gcd(f1.b, f2.b);</span><br><span class="line">        fra.b = lcm;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!f1.p) f1.a = -f1.a;</span><br><span class="line">        <span class="keyword">if</span> (!f2.p) f2.a = -f2.a;</span><br><span class="line">        <span class="keyword">if</span> (opera == <span class="string">'-'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f1.b != <span class="number">0</span> &amp;&amp; f2.b != <span class="number">0</span>) &#123;</span><br><span class="line">                fra.a = f1.a * (lcm / f1.b) - f2.a * (lcm / f2.b);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fra.a = f1.a - f2.a;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (f1.b != <span class="number">0</span> &amp;&amp; f2.b != <span class="number">0</span>) &#123;</span><br><span class="line">                fra.a = f1.a * (lcm / f1.b) + f2.a * (lcm / f2.b);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fra.a = f1.a + f2.a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fra.a &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            fra.a = -fra.a;</span><br><span class="line">            fra.p = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mm(fra);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; format(f1) + opera + format(f2) + <span class="string">"="</span> + format(fra) &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> fra;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mm</span><span class="params">(Fra &amp;f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> g = gcd(f.a, f.b);</span><br><span class="line">        f.a = f.a / g;</span><br><span class="line">        f.b = f.b / g;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="588-Design-In-Memory-File-System"><a href="#588-Design-In-Memory-File-System" class="headerlink" title="588. Design In-Memory File System"></a><a href="https://leetcode.com/contest/leetcode-weekly-contest-33/problems/design-in-memory-file-system/" target="_blank" rel="noopener">588. Design In-Memory File System</a></h1><blockquote><br>Design an in-memory file system to simulate the following functions:<br><code>ls</code>: Given a path in string format. If it is a file path, return a list that only contains this file’s name. If it is a directory path, return the list of file and directory names <strong>in this directory</strong>. Your output (file and directory names together) should in <strong>lexicographic order</strong>.<br><code>mkdir</code>: Given a <strong>directory path</strong> that does not exist, you should make a new directory according to the path. If the middle directories in the path don’t exist either, you should create them as well. This function has void return type.<br><code>addContentToFile</code>: Given a <strong>file path</strong> and <strong>file content</strong> in string format. If the file doesn’t exist, you need to create that file containing given content. If the file already exists, you need to <strong>append</strong> given content to original content. This function has void return type.<br><code>readContentFromFile</code>: Given a <strong>file path</strong>, return its <strong>content</strong> in string format.<br><br><strong>Example:</strong><br><strong>Input:</strong><br>[“FileSystem”,”ls”,”mkdir”,”addContentToFile”,”ls”,”readContentFromFile”]<br>[[],[“/“],[“/a/b/c”],[“/a/b/c/d”,”hello”],[“/“],[“/a/b/c/d”]]<br><strong>Output:</strong><br>[null,[],null,null,[“a”],”hello”]<br><strong>Explanation:</strong><br><img src="/image/filesystem.png" alt="filesystem"><br><br><strong>Note:</strong><br>1. You can assume all file or directory paths are absolute paths which begin with <code>/</code> and do not end with <code>/</code> except that the path is just <code>&quot;/&quot;</code>.<br>2. You can assume that all operations will be passed valid parameters and users will not attempt to retrieve file content or list a directory or file that does not exist.<br>3. You can assume that all directory names and file names only contain lower-case letters, and same names won’t exist in the same directory.<br></blockquote><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>实现一个虚拟文件系统。这是一题偏工程的题目，所以我用了java来实现。毫无疑问，目录的数据结构应该用树来保存。由于目录的主要操作是对节点的孩子进行的，所以使用了<strong>孩子表示法</strong>，即每个节点存储其孩子子节点的所有指针。输出目录对于顺序有要求，需要是字典序(lexicographic order)，所以我用了<code>TreeMap</code>并实现<code>TreeNode</code>的<code>compareTo</code>方法，在元素插入时就能保证子目录的顺序。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> <span class="keyword">implements</span> <span class="title">Comparable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">        <span class="keyword">public</span> TreeMap&lt;String, TreeNode&gt; children;</span><br><span class="line">        <span class="keyword">public</span> String content;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> isDir;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(String name, <span class="keyword">boolean</span> isDir)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            children = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">this</span>.isDir = isDir;</span><br><span class="line">            content = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o.toString().compareTo(toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> TreeNode(<span class="string">""</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">ls</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        String[] treeNodes = path.split(<span class="string">"/"</span>);</span><br><span class="line">        TreeNode p = root;</span><br><span class="line">        <span class="keyword">final</span> List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; treeNodes.length; i++ ) &#123;</span><br><span class="line">            String node = treeNodes[i];</span><br><span class="line">            <span class="keyword">if</span> (p.children.containsKey(node)) &#123;</span><br><span class="line">                p = p.children.get(node);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!p.isDir) &#123;</span><br><span class="line">            res.add(p.name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, TreeNode&gt; entry : p.children.entrySet()) &#123;</span><br><span class="line">                res.add(entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">mkdirAndGet</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        TreeNode p = root;</span><br><span class="line">        String[] nodes = path.split(<span class="string">"/"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nodes.length; i++ ) &#123;</span><br><span class="line">            String node = nodes[i];</span><br><span class="line">            <span class="keyword">if</span> (p.children.containsKey(node)) &#123;</span><br><span class="line">                p = p.children.get(node);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                TreeNode nn = <span class="keyword">new</span> TreeNode(node, <span class="keyword">true</span>);</span><br><span class="line">                p.children.put(node, nn);</span><br><span class="line">                p = nn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mkdir</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        mkdirAndGet(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addContentToFile</span><span class="params">(String filePath, String content)</span> </span>&#123;</span><br><span class="line">        String dirPath = filePath.substring(<span class="number">0</span>, filePath.lastIndexOf(<span class="string">"/"</span>));</span><br><span class="line">        String fileName = filePath.substring(filePath.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>, filePath.length());</span><br><span class="line">        TreeNode parent = mkdirAndGet(dirPath);</span><br><span class="line">        TreeNode file;</span><br><span class="line">        <span class="keyword">if</span> (parent.children.containsKey(fileName)) &#123;</span><br><span class="line">            file = parent.children.get(fileName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            file = <span class="keyword">new</span> TreeNode(fileName, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        file.content += content;</span><br><span class="line">        parent.children.put(fileName, file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readContentFromFile</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">        TreeNode node = mkdirAndGet(filePath);</span><br><span class="line">        <span class="keyword">return</span> node.content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileSystem fs = <span class="keyword">new</span> FileSystem();</span><br><span class="line">        fs.mkdir(<span class="string">"/user/linwei/Downloads"</span>);</span><br><span class="line">        fs.mkdir(<span class="string">"/user/linwei/Documents"</span>);</span><br><span class="line">        System.out.println(fs.ls(<span class="string">"/user/linwei"</span>));</span><br><span class="line"></span><br><span class="line">        fs.addContentToFile(<span class="string">"/user/linwei/test.java"</span>, <span class="string">"int main"</span>);</span><br><span class="line">        fs.addContentToFile(<span class="string">"/user/linwei/test.java"</span>, <span class="string">" hello, world"</span>);</span><br><span class="line">        System.out.println(fs.readContentFromFile(<span class="string">"/user/linwei/test.java"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Weekly Contest 32 题解</title>
      <link href="/2017/05/14/Leetcode-Weekly-Contest-32-%E9%A2%98%E8%A7%A3/"/>
      <url>/2017/05/14/Leetcode-Weekly-Contest-32-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>周末睡了个大懒觉，10:30起来匆匆洗漱后只提交了签到题，之后花了一个多小时完成了后面的题目。下不为例，在这里还是记录下吧。</p><p>计算机算法主要还是熟练度的掌握和算法的理解，需要不断的练习。从而达到遇到一道新算法，能产生一种『这题我曾见过的』的感觉。</p></blockquote><p>时间：2017/5/14<br>竞赛链接：<a href="https://leetcode.com/contest/leetcode-weekly-contest-32" target="_blank" rel="noopener">https://leetcode.com/contest/leetcode-weekly-contest-32</a></p><a id="more"></a><h1 id="581-Shortest-Unsorted-Continuous-Subarray"><a href="#581-Shortest-Unsorted-Continuous-Subarray" class="headerlink" title="581. Shortest Unsorted Continuous Subarray"></a><a href="https://leetcode.com/contest/leetcode-weekly-contest-32/problems/shortest-unsorted-continuous-subarray/" target="_blank" rel="noopener">581. Shortest Unsorted Continuous Subarray</a></h1><blockquote><br>Given an integer array, you need to find one <strong>continuous subarray</strong> that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.<br><br>You need to find the <strong>shortest</strong> such subarray and output its length.<br><br><strong>Example 1:</strong><br><strong>Input:</strong> [2, 6, 4, 8, 10, 9, 15]<br><strong>Output:</strong> 5<br><strong>Explanation:</strong> You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.<br><br><strong>Note:</strong><br>1. Then length of the input array is in range [1, 10,000].<br>2. The input array may contain duplicates, so ascending order here means <strong>&lt;=</strong>.<br></blockquote><p>找出数组排成递增序列最少需要操作的连续元素个数，即未排序的子数组长度。</p><h2 id="思路一：排序比较法"><a href="#思路一：排序比较法" class="headerlink" title="思路一：排序比较法"></a>思路一：排序比较法</h2><ul><li>时间复杂度：$O(logN)$ </li><li>空间复杂度：$O(N)$</li></ul><p>这是很容易想到的一种解法，这题比较简单的思路是：先拷贝一个新的数组B，对数组B进行排序。然后将数组A和数组B首尾依次进行比较，直到遇到不相等的数字为止，这时得到的首尾下标之差即为子数组的长度。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findUnsortedSubarray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sorted;</span><br><span class="line">        sorted.assign(nums.begin(), nums.end());</span><br><span class="line">        sort(sorted.begin(), sorted.end());</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>, r=nums.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; nums.size() &amp;&amp; nums[l] == sorted[l]) l++;</span><br><span class="line">        <span class="keyword">while</span>(r &gt;= l &amp;&amp; nums[r] == sorted[r]) r--;</span><br><span class="line">        <span class="keyword">return</span> r - l + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="思路二：首尾指针搜索"><a href="#思路二：首尾指针搜索" class="headerlink" title="思路二：首尾指针搜索"></a>思路二：首尾指针搜索</h2><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul><p>定义两个变量，<code>begin</code>表示子数组的开始位置，<code>end</code>表示子数组的结束位置<br>设置两个搜索方向：</p><ul><li>第一个方向为从头到尾搜索，保存一个变量<code>mmax</code>，表示当前位置之前所遇到的最大值。当遇到元素小于<code>mmax</code>时，更新<code>end</code>坐标</li><li>第二个方向从尾部往头部搜索，保存一个变量<code>mmin</code>，表示当前位置之后所遇到的最小值。当遇到有元素大于<code>mmin</code>时，更新<code>begin</code>坐标</li></ul><p>其中需要特别注意一下元素个数小于2的情况，初始化令<code>beg=-1</code>,<code>end=-2</code>，可以体会一下为什么这么设置。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findUnsortedSubarray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.size(), beg = <span class="number">-1</span>, end = <span class="number">-2</span>, mmin = A[n<span class="number">-1</span>], mmax = A[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; A.size(); i++) &#123;</span><br><span class="line">          mmax = max(mmax, A[i]);</span><br><span class="line">          mmin = min(mmin, A[n<span class="number">-1</span>-i]);</span><br><span class="line">          <span class="keyword">if</span> (A[i] &lt; mmax) end = i;                </span><br><span class="line">          <span class="keyword">if</span> (A[n<span class="number">-1</span>-i] &gt; mmin) beg = n<span class="number">-1</span>-i; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> end - beg + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="582-Kill-Process"><a href="#582-Kill-Process" class="headerlink" title="582. Kill Process"></a><a href="https://leetcode.com/contest/leetcode-weekly-contest-32/problems/kill-process/" target="_blank" rel="noopener">582. Kill Process</a></h1><blockquote><br>Given <strong>n</strong> processes, each process has a unique <strong>PID (process id)</strong> and its <strong>PPID (parent process id)</strong>.<br><br>Each process only has one parent process, but may have one or more children processes. This is just like a tree structure. Only one process has PPID that is 0, which means this process has no parent process. All the PIDs will be distinct positive integers.<br><br>We use two list of integers to represent a list of processes, where the first list contains PID for each process and the second list contains the corresponding PPID.<br><br>Now given the two lists, and a PID representing a process you want to kill, return a list of PIDs of processes that will be killed in the end. You should assume that when a process is killed, all its children processes will be killed. No order is required for the final answer.<br><br><strong>Example 1:</strong><br><strong>Input:</strong><br>pid =  [1, 3, 10, 5]<br>ppid = [3, 0, 5, 3]<br>kill = 5<br><strong>Output:</strong> [5,10]<br><strong>Explanation:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   3</span><br><span class="line"> /   \</span><br><span class="line">1     5</span><br><span class="line">     /</span><br><span class="line">    10</span><br></pre></td></tr></table></figure><br><br>Kill 5 will also kill 10.<br><br><strong>Note:</strong><br>1. The given kill id is guaranteed to be one of the given PIDs.<br>2. n &gt;= 1.<br></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>进程树问题，在杀掉父进程后，该进程的子进程也要被杀掉。其实就是树的搜索算法变种，这个地方由于没有顺序的要求，<code>DFS</code>和<code>BFS</code>都是可以的。唯一需要的注意的是：由于数据结构的限制，需要通过预处理来找到一个节点的所有子节点，用<code>map</code>存储。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">killProcess</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; pid, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ppid, <span class="keyword">int</span> kill)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt; child;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ppid.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child.find(ppid[i]) == child.end()) &#123;</span><br><span class="line">                <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">                child[ppid[i]] = s;</span><br><span class="line">            &#125;</span><br><span class="line">            child[ppid[i]].insert(pid[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        s.push(kill);</span><br><span class="line">        <span class="keyword">while</span>(!s.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = s.top();</span><br><span class="line">            res.push_back(k);</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="keyword">if</span> (child.find(k) != child.end())&#123; </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> p : child[k]) &#123;</span><br><span class="line">                    s.push(p);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="583-Delete-Operation-for-Two-Strings"><a href="#583-Delete-Operation-for-Two-Strings" class="headerlink" title="583. Delete Operation for Two Strings"></a><a href="https://leetcode.com/contest/leetcode-weekly-contest-32/problems/delete-operation-for-two-strings/" target="_blank" rel="noopener">583. Delete Operation for Two Strings</a></h1><blockquote><br>Given two words <em>word1</em> and <em>word2</em>, find the minimum number of steps required to make <em>word1</em> and <em>word2</em> the same, where in each step you can delete one character in either string.<br><br><strong>Example 1:</strong><br><strong>Input:</strong> “sea”, “eat”<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> You need one step to make “sea” to “ea” and another step to make “eat” to “ea”.<br><br><strong>Note:</strong><br>1. The length of given words won’t exceed 500.<br>2. Characters in given words can only be lower-case letters.<br></blockquote><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>给定两个字符串，只提供删除字符操作，找出将两个字符串变成相同字符串的最少删除操作次数。</p><p>典型的<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97" target="_blank" rel="noopener">最长公共子序列</a>问题，属于比较基础的 <strong>动态规划</strong> 问题，相关的问题还有<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2" target="_blank" rel="noopener">最长公共子串</a>，具体这里就不再描述了。</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(<span class="built_in">string</span> sx, <span class="built_in">string</span> sy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> opt[sx.size() + <span class="number">1</span>][sy.size() + <span class="number">1</span>] ;</span><br><span class="line">        <span class="built_in">memset</span>(opt, <span class="number">0</span>, <span class="keyword">sizeof</span>(opt));</span><br><span class="line">        <span class="keyword">int</span> mm = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = sx.size() - <span class="number">1</span> ; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = sy.size() - <span class="number">1</span> ; j &gt;= <span class="number">0</span> ; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sx[i] == sy[j]) &#123;</span><br><span class="line">                    opt[i][j] = opt[i + <span class="number">1</span>][j + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    opt[i][j] = max(opt[i + <span class="number">1</span>][j], opt[i][j + <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                mm = max(opt[i][j], mm);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (sx.size() - mm) + (sy.size() - mm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="587-Erect-the-Fence"><a href="#587-Erect-the-Fence" class="headerlink" title="587. Erect the Fence"></a><a href="https://leetcode.com/contest/leetcode-weekly-contest-32/problems/erect-the-fence/" target="_blank" rel="noopener">587. Erect the Fence</a></h1><blockquote><br>There are some trees, where each tree is represented by (x,y) coordinate in a two-dimensional garden. Your job is to fence the entire garden using the <strong>minimum length</strong> of rope as it is expensive. The garden is well fenced only if all the trees are enclosed. Your task is to help find the coordinates of trees which are exactly located on the fence perimeter.<br><br><strong>Example 1:</strong><br><strong>Input:</strong> [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]<br><strong>Output:</strong> [[1,1],[2,0],[4,2],[3,3],[2,4]]<br><strong>Explanation:</strong><br><img src="/image/erect_the_fence_1.png" alt><br><br><strong>Example 2:</strong><br><strong>Input:</strong> [[1,2],[2,2],[4,2]]<br><strong>Output:</strong> [[1,2],[2,2],[4,2]]<br><strong>Explanation:</strong><br><img src="/image/erect_the_fence_2.png" alt><br>Even you only have trees in a line, you need to use rope to enclose them.<br><br><br>Note:<br>1. All trees should be enclosed together. You cannot cut the rope to enclose trees that will separate them in more than one group.<br>2. All input integers will range from 0 to 100.<br>3. The garden has at least one tree.<br>4. All coordinates are distinct.<br>5. Input points have <strong>NO</strong> order. No order required for output.<br></blockquote><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>典型的 <a href="https://zh.wikipedia.org/wiki/%E5%87%B8%E5%8C%85" target="_blank" rel="noopener">凸包问题</a> ，凸包问题的解决方法有：</p><ol><li>增量式算法</li><li>包裹法 </li><li>Graham 扫描法</li><li>单调链</li></ol><p>由于<code>Graham 扫描法</code> 的效率最高，时间复杂度为 $O(nlogn)$，这里采用该方法。</p><p>算法步骤如下：</p><p>第一步：找到最下边的点，如果有多个点纵坐标相同的点都在最下方，则选取最左边的。在右图中这个点是P。这一步只需要扫描一遍所有的点即可，时间复杂度为 $O(n^2)$</p><p>第二步：将所有的点按照相对于第一步中的得到的点P的<a href="https://zh.wikipedia.org/wiki/%E6%9E%81%E5%9D%90%E6%A0%87%E7%B3%BB#.E7.82.B9.E7.9A.84.E8.A1.A8.E7.A4.BA" title="极坐标系" target="_blank" rel="noopener">极角</a>大小进行排序。注意这一步并不需要真的通过计算反三角函数来获取与x轴夹角的大小。可以直接使用该点与P点连线的斜率，或者由P点到该点向量的与沿x轴单位向量的点积来减少计算量。可以使用诸如<a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F" title="快速排序" target="_blank" rel="noopener">快速排序</a>、<a href="https://zh.wikipedia.org/wiki/%E5%A0%86%E6%8E%92%E5%BA%8F" title="堆排序" target="_blank" rel="noopener">堆排序</a>之类的算法进行排序，时间复杂度为$O(nlogn)$。</p><p>第三步：维护一个栈，以保存当前的凸包。按第二步中排序得到的结果，依次将点加入到栈中，如果正在考虑的点与栈顶的两个点不是“向左转”的，就表明当前栈顶的点并不在凸包上，而我们需要将其弹出栈，重复这一个过程直到正在考虑的点与栈顶的两个点是“向左转”的。右边的图解给出了“向左转”和“向右转”的示意：</p><ul><li>刚开始的两个点P、A直接入栈。</li><li>在点B加入时，P-&gt;A-&gt;B就构成左转，因此直接加入点B即可。</li><li>接下来加入点C，A-&gt;B-&gt;C还是构成左转，因此直接加入点C。</li><li>继续加入点D时，B-&gt;C-&gt;D就变成右转了，此时可以观察到如果将BD连线，C将被包含在多边形的内部，因此点C出栈。注意需要继续检查A-&gt;B-&gt;D是左转还是右转，如果还是右转的话B点需要继续出栈，以此类推。这个例子比较简单，A-&gt;B-&gt;D已经是左转了，D点可以入栈。</li><li>最后回到P点，B-&gt;D-&gt;P是左转，算法完成，所求凸包为四边形PABD。</li></ul><p>另外，如果发现三点共线的情况，算法可以考虑将其视为左转或者右转。这取决于究竟只是要求凸包的边界，还是要找到在凸包边界上所有的点。</p><p>我们需要简单地计算两个向量的有向面积，即两个向量的叉乘的结果来判断两个向量的相对位置。</p><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*计算两点之间距离*/</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dis</span><span class="params">(Point p1,Point p2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*利用×乘 计算三点之间关系 0：共线 1：依次成顺时针 2：依次成逆时针*/</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">orientation</span><span class="params">(Point p1,Point p2,Point p3)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val=(p3.y-p1.y)*(p2.x-p1.x)-(p3.x-p1.x)*(p2.y-p1.y);</span><br><span class="line">        <span class="keyword">if</span>(val==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> val&gt;<span class="number">0</span>?<span class="number">2</span>:<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*将点排序 采用结构体进行排序*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pointsComparator</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        Point p0;<span class="comment">/*基准点*/</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> Point&amp; p1,<span class="keyword">const</span> Point&amp;  p2)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> val=orientation(p0,p1,p2);</span><br><span class="line">            <span class="keyword">if</span>(val==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> dis(p0,p1)&lt;=dis(p0,p2);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> val==<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pointsComparator(Point p): p0(p)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;Point&gt; <span class="title">outerTrees</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=points.size();</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> points;</span><br><span class="line">        <span class="keyword">int</span> ymin=points[<span class="number">0</span>].y,minlo=<span class="number">0</span>;<span class="comment">/*找y坐标最小的点，记录其下标*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(points[i].y&lt;ymin||(points[i].y==ymin&amp;&amp;points[i].x&lt;points[minlo].x))</span><br><span class="line">                ymin=points[i].y,minlo=i;</span><br><span class="line">        &#125;</span><br><span class="line">        Point tem=points[<span class="number">0</span>];</span><br><span class="line">        points[<span class="number">0</span>]=points[minlo];</span><br><span class="line">        points[minlo]=tem;</span><br><span class="line">        Point p0=points[<span class="number">0</span>];</span><br><span class="line">        sort(points.begin(),points.end(),pointsComparator(p0));</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        Point pn = points.back();</span><br><span class="line">        <span class="keyword">if</span> (orientation(p0, points[<span class="number">1</span>], pn) != <span class="number">0</span>) &#123;<span class="comment">//非所有点都共线</span></span><br><span class="line">            <span class="keyword">int</span> idx = n<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span> (orientation(p0, points[idx], pn) == <span class="number">0</span>) &#123;<span class="comment">//找到</span></span><br><span class="line">                idx--;</span><br><span class="line">            &#125;</span><br><span class="line">            reverse(points.begin() + idx + <span class="number">1</span>, points.end());<span class="comment">//调序</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;Point&gt; vertices;</span><br><span class="line">        vertices.push_back(points[<span class="number">0</span>]);</span><br><span class="line">        vertices.push_back(points[<span class="number">1</span>]);</span><br><span class="line">        vertices.push_back(points[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(orientation(vertices[vertices.size()<span class="number">-2</span>],vertices.back(),points[i])==<span class="number">1</span>)</span><br><span class="line">                vertices.pop_back();</span><br><span class="line">            vertices.push_back(points[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vertices;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode Weekly Contest 31 题解</title>
      <link href="/2017/05/07/Leetcode-Weekly-Contest-31-%E9%A2%98%E8%A7%A3/"/>
      <url>/2017/05/07/Leetcode-Weekly-Contest-31-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="http://leetcode.com/" target="_blank" rel="noopener">Leetcode</a> 的每周算法竞赛是在北京时间的周日早上 <code>9:30 ~ 11:00</code>，时间为一个半小时，题量是4题左右，难度依次递增，使用积分制排名。</p></blockquote><blockquote><p>为了敦促自己的算法学习，决定在这里立个flag：从这周开始，每周参加 Leetcode 的 Weekly Contest，并将题解整理成博文发布。话不多说，开始干活!</p></blockquote><p>时间：2017/5/7<br>竞赛链接：<a href="https://leetcode.com/contest/leetcode-weekly-contest-31" target="_blank" rel="noopener">https://leetcode.com/contest/leetcode-weekly-contest-31</a></p><a id="more"></a><h1 id="575-Distribute-Candies"><a href="#575-Distribute-Candies" class="headerlink" title="575. Distribute Candies"></a><a href="https://leetcode.com/contest/leetcode-weekly-contest-31/problems/distribute-candies/" target="_blank" rel="noopener">575. Distribute Candies</a></h1><blockquote><br>Given an integer array with <strong>even</strong> length, where different numbers in this array represent different <strong>kinds</strong> of candies. Each number means one candy of the corresponding kind. You need to distribute these candies <strong>equally</strong> in number to brother and sister. Return the maximum number of <strong>kinds</strong> of candies the sister could gain.<br><br><strong>Example 1:</strong><br><strong>Input:</strong> candies = [1,1,2,2,3,3]<br><strong>Output:</strong> 3<br><strong>Explanation:</strong><br>There are three different kinds of candies (1, 2 and 3), and two candies for each kind.<br>Optimal distribution: The sister has candies [1,2,3] and the brother has candies [1,2,3], too.<br>The sister has three different kinds of candies.<br><br><strong>Example 2:</strong><br><strong>Input:</strong> candies = [1,1,2,3]<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> For example, the sister has candies [2,3] and the brother has candies [1,1].<br>The sister has two different kinds of candies, the brother has only one kind of candies.<br><br><strong>Note:</strong><br>1. The length of the given array is in range [2, 10,000], and will be even.<br>2. The number in given array is in range [-100,000, 100,000].<br></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>第一题一般是签到题啦,<br>这里使用 set 保存所有的糖果种类total，两人平分能得到的最大种类为 <code>min(total, size/2)</code></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">distributeCandies</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; candies)</span> </span>&#123;</span><br><span class="line">   <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; ss;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> i : candies) &#123;</span><br><span class="line">       <span class="keyword">if</span> (ss.find(i) == ss.end()) &#123;</span><br><span class="line">           ss.insert(i);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> min(ss.size(), candies.size() / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面在Discuss中看到精简的一行版本，还是得熟悉熟悉STL的使用啊</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">distributeCandies</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> min(<span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt;(begin(c), end(c)).size(), c.size() / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="572-Subtree-of-Another-Tree"><a href="#572-Subtree-of-Another-Tree" class="headerlink" title="572. Subtree of Another Tree"></a><a href="https://leetcode.com/contest/leetcode-weekly-contest-31/problems/subtree-of-another-tree/" target="_blank" rel="noopener">572. Subtree of Another Tree</a></h1><blockquote><br>Given two non-empty binary trees <strong>s</strong> and <strong>t</strong>, check whether tree <strong>t</strong> has exactly the same structure and node values with a subtree of <strong>s</strong>. A subtree of <strong>s</strong> is a tree consists of a node in <strong>s</strong> and all of this node’s descendants. The tree <strong>s</strong> could also be considered as a subtree of itself.<br><br><strong>Example 1:</strong><br>Given tree s:<br>     3<br>    / \<br>   4   5<br>  / \<br> 1   2<br><br>Given tree t:<br>   4<br>  / \<br> 1   2<br><br>Return <strong>true</strong>, because t has the same structure and node values with a subtree of s.<br><br><strong>Example 2:</strong><br>Given tree s:<br>     3<br>    / \<br>   4   5<br>  / \<br> 1   2<br>    /<br>   0<br><br>Given tree t:<br>   4<br>  / \<br> 1   2<br><br>Return <strong>false</strong>.<br></blockquote><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>判断是否为子树的问题可以转化为判断A的子树与B是否<strong>相等</strong>的问题，定义两个递归函数，分别是判断是否子树<code>isSubTree()</code>和判断树是否相等<code>isSameTree()</code></p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @param T1, T2: The roots of binary tree.</span></span><br><span class="line"><span class="comment">     * @return: True if T2 is a subtree of T1, or false.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSubtree</span><span class="params">(TreeNode *T1, TreeNode *T2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code here</span></span><br><span class="line">        <span class="keyword">if</span> (T1 == <span class="literal">NULL</span> &amp;&amp; T2 == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (T1 != <span class="literal">NULL</span> &amp;&amp; T2 == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (T1 == <span class="literal">NULL</span> &amp;&amp; T2 != <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (T1-&gt;val == T2-&gt;val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isSametree(T1-&gt;left, T2-&gt;left) &amp;&amp; isSametree(T1-&gt;right, T2-&gt;right)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isSubtree(T1-&gt;left, T2) || isSubtree(T1-&gt;right, T2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSametree</span><span class="params">(TreeNode *T1, TreeNode *T2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (T1 == <span class="literal">NULL</span> &amp;&amp; T2 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (T1 == <span class="literal">NULL</span> || T2 == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (T1-&gt;val != T2-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isSametree(T1-&gt;left, T2-&gt;left) &amp;&amp; isSametree(T1-&gt;right, T2-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="573-Squirrel-Simulation"><a href="#573-Squirrel-Simulation" class="headerlink" title="573. Squirrel Simulation"></a><a href="https://leetcode.com/contest/leetcode-weekly-contest-31/problems/squirrel-simulation/" target="_blank" rel="noopener">573. Squirrel Simulation</a></h1><blockquote><br>There’s a tree, a squirrel, and several nuts. Positions are represented by the cells in a 2D grid. Your goal is to find the <strong>minimal</strong> distance for the squirrel to collect all the nuts and put them under the tree one by one. The squirrel can only take at most <strong>one nut</strong> at one time and can move in four directions - up, down, left and right, to the adjacent cell. The distance is represented by the number of moves.<br><br><strong>Example 1:</strong><br><strong>Input:</strong><br>Height : 5<br>Width : 7<br>Tree position : [2,2]<br>Squirrel : [4,4]<br>Nuts : [[3,0], [2,5]]<br><strong>Output:</strong> 12<br><strong>Explanation:</strong><br><img src="/image/squirrel_simulation.png" alt><br><strong>Note:</strong><br>1. All given positions won’t overlap.<br>2. The squirrel can take at most one nut at one time.<br>3. The given positions of nuts have no order.<br>4. Height and width are positive integers.<br></blockquote><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>贪心算法：由于松鼠每次最多携带一枚坚果，而一颗坚果的运输只有两种可能：</p><ul><li>一是作为第一条路径，执行<code>松鼠初始位置-&gt;第一颗坚果-&gt;树</code></li><li>二是其余路径，执行<code>树-&gt;坚果-&gt;树</code>，该距离为树到坚果的距离 * 2</li></ul><p>我们把二者的差值设为<code>save</code>，即通过把该坚果设为第一条路径所能节省的距离，<br>因此，问题转化成了：求<code>save</code>的最大值。最终的最短路径 $P$ 为：<br>$$ P=\sum_{i=0}^n{P_i(tree, nut_i)}*2-Max(save) $$</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(<span class="keyword">int</span> height, <span class="keyword">int</span> width, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; tree, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; squirrel, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; nuts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> save = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> nut : nuts) &#123;</span><br><span class="line">            <span class="keyword">int</span> treeD = calcDis(nut, tree);</span><br><span class="line">            <span class="keyword">int</span> squD = calcDis(nut, squirrel);</span><br><span class="line">            save = max(save, treeD - squD);</span><br><span class="line">            cnt += treeD * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = cnt - save;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calcDis</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pos1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pos2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(pos1[<span class="number">0</span>] - pos2[<span class="number">0</span>]) + <span class="built_in">abs</span>(pos1[<span class="number">1</span>] - pos2[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="576-Out-of-Boundary-Paths"><a href="#576-Out-of-Boundary-Paths" class="headerlink" title="576. Out of Boundary Paths"></a><a href="https://leetcode.com/contest/leetcode-weekly-contest-31/problems/out-of-boundary-paths/" target="_blank" rel="noopener">576. Out of Boundary Paths</a></h1><blockquote><br>There is an <strong>m</strong> by <strong>n</strong> grid with a ball. Given the start coordinate <strong>(i,j)</strong> of the ball, you can move the ball to <strong>adjacent</strong> cell or cross the grid boundary in four directions (up, down, left, right). However, you can <strong>at most</strong> move <strong>N</strong> times. Find out the number of paths to move the ball out of grid boundary. The answer may be very large, return it after mod 10^9 + 7.<br><br><strong>Example 1:</strong><br><strong>Input:</strong>m = 2, n = 2, N = 2, i = 0, j = 0<br><strong>Output:</strong> 6<br><strong>Explanation:</strong><br><img src="/image/out_of_boundary_paths_1.png" alt><br><strong>Example 2:</strong><br><strong>Input:</strong>m = 1, n = 3, N = 3, i = 0, j = 1<br><strong>Output:</strong> 12<br><strong>Explanation:</strong><br><img src="/image/out_of_boundary_paths_2.png" alt><br><strong>Note:</strong><br>1. Once you move the ball out of boundary, you cannot move it back.<br>2. The length and height of the grid is in range [1,50].<br>3. N is in range [0,50].<br></blockquote><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>最后一题有点难，是一个动态规划的问题<br>通过简单分析，我们可以得出结论：N步移动能走出边界的路径数量是其相邻（上下左右）单元格N-1步移动能走出边界的路径数量之和，这么说有点拗口，直接给出公式：<br>$$ dp(N, i, j) = dp(N-1, i-1, j) +  dp(N-1, i , j-1) + dp(N-1, i+1, j) + dp(N-1, i, j+1) $$</p><p>其中当单元格 $(i, j)$ 在越界时， 有$dp(N, i, j)=1$</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findPaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> N, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dp[<span class="number">51</span>][<span class="number">50</span>][<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> Ni = <span class="number">1</span>; Ni &lt;= N; ++Ni)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> mi = <span class="number">0</span>; mi &lt; m; ++mi)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> ni = <span class="number">0</span>; ni &lt; n; ++ni) &#123;</span><br><span class="line">                    dp[Ni][mi][ni] = ((<span class="keyword">long</span> <span class="keyword">long</span>)(mi == <span class="number">0</span> ? <span class="number">1</span> : dp[Ni - <span class="number">1</span>][mi - <span class="number">1</span>][ni]) + </span><br><span class="line">                                     (mi == m - <span class="number">1</span> ? <span class="number">1</span> : dp[Ni - <span class="number">1</span>][mi + <span class="number">1</span>][ni]) + </span><br><span class="line">                                     (ni == <span class="number">0</span> ? <span class="number">1</span> : dp[Ni - <span class="number">1</span>][mi][ni - <span class="number">1</span>]) + </span><br><span class="line">                                     (ni == n - <span class="number">1</span> ? <span class="number">1</span> : dp[Ni - <span class="number">1</span>][mi][ni + <span class="number">1</span>])) % <span class="number">1000000007</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[N][i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个能用的Markdown记事本——mWeb</title>
      <link href="/2017/05/05/%E4%B8%80%E4%B8%AA%E8%83%BD%E7%94%A8%E7%9A%84Markdown%E8%AE%B0%E4%BA%8B%E6%9C%AC%E2%80%94%E2%80%94mWeb/"/>
      <url>/2017/05/05/%E4%B8%80%E4%B8%AA%E8%83%BD%E7%94%A8%E7%9A%84Markdown%E8%AE%B0%E4%BA%8B%E6%9C%AC%E2%80%94%E2%80%94mWeb/</url>
      
        <content type="html"><![CDATA[<p>对于程序员来说，记笔记是刚需，在这事上我花了不少时间研究，发现其实市面上能用的实在太少了。对我来说，就以下几点要求：</p><ul><li>支持 Markdown 写作</li><li>编辑页面舒适</li><li>使用流畅稳定</li><li>支持云同步</li><li>最好是跨平台的</li></ul><a id="more"></a><p>简单说说我用过的笔记软件：</p><h2 id="印象笔记"><a href="#印象笔记" class="headerlink" title="印象笔记"></a>印象笔记</h2><p>印象笔记很早就开始用了，但编辑功能是在太弱了，不支持 Markdown。渐渐地我一般用他来做网页剪藏，用于整理一些外部渠道获取的知识。</p><h2 id="Leanote"><a href="#Leanote" class="headerlink" title="Leanote"></a>Leanote</h2><p>之前用过一段时间，无奈UI是在太丑了，而且后来收费了。这个编辑器是基于 Electron 的，笔记上传到 Leanote 自建的服务器，小公司感觉还是信不过，收费后就转移资料弃疗了。</p><h2 id="马克飞象"><a href="#马克飞象" class="headerlink" title="马克飞象"></a>马克飞象</h2><p>很强大很好用，支持同步到印象笔记，界面设计相当满意，无奈是收费的，一年价格78有点小贵。之前大四时候买了一年，那段时间也是记笔记的黄金年代，几乎天天使用。当然也有缺点，比如经常出现同步错误等问题。</p><h2 id="Gitbook"><a href="#Gitbook" class="headerlink" title="Gitbook"></a>Gitbook</h2><p>没错，我曾经使用gitbook来记笔记。Gitbook 的客户端自从更新之后就问题不断，而且经常同步不了，这让人很恼火，用了一段时间也放弃了。</p><h2 id="Sublime-Text-Markdown-插件"><a href="#Sublime-Text-Markdown-插件" class="headerlink" title="Sublime Text + Markdown 插件"></a>Sublime Text + Markdown 插件</h2><p>UI比较简陋，也没有预览功能，使用github进行版本管理，太折腾了。</p><h2 id="Quiver"><a href="#Quiver" class="headerlink" title="Quiver"></a>Quiver</h2><p>使用文本块模式，支持本地笔记库，还算可以，但是体验很一般。</p><h2 id="mWeb"><a href="#mWeb" class="headerlink" title="mWeb"></a>mWeb</h2><ul><li>界面优美</li><li>写作舒适</li><li>可自由选择同步方式，如 iCloud、印象笔记等</li><li>支持内外两种模式，可以编辑外部markdown文档</li><li>对 Markdown 的支持很好</li><li>最重要的是滚动顺畅</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 开屏动图广告</title>
      <link href="/2017/04/07/%E5%85%B3%E4%BA%8E%E5%BC%80%E5%B1%8F%E5%8A%A8%E5%9B%BE%E5%B9%BF%E5%91%8A/"/>
      <url>/2017/04/07/%E5%85%B3%E4%BA%8E%E5%BC%80%E5%B1%8F%E5%8A%A8%E5%9B%BE%E5%B9%BF%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><h3 id="Keep"><a href="#Keep" class="headerlink" title="Keep"></a>Keep</h3><p>使用mp4视频 + Android原生VideoView</p><h3 id="今日头条"><a href="#今日头条" class="headerlink" title="今日头条"></a>今日头条</h3><p>逆向分析发现SplashAdActivity中有大量VideoController，推测出也是使用了视频<br><a id="more"></a><br><img src="/image/14906025215157.jpg" alt></p><p>这里并没有使用原生的VideoView，自定义了两个 SSRenderSurfaceView 和 SSRenderTextureView 用于显示视频</p><h3 id="斗鱼"><a href="#斗鱼" class="headerlink" title="斗鱼"></a>斗鱼</h3><p><img src="/image/14908416616631.jpg" alt></p><p>使用fresco作为图片加载框架，但测试时没有动图广告投放，使用格式暂不清楚</p><hr><h2 id="推荐技术方案"><a href="#推荐技术方案" class="headerlink" title="推荐技术方案"></a>推荐技术方案</h2><p>推荐使用MP4作为动图开屏方案</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>体积小： GIF动图的压缩算法很成问题。原始的GIF体积超过500kb，而转换成mp4后，体积只有100kb。一个GIF动图实际上就是一组连续的图片装到一个图片里。而mp4视频可以利用各种强大的压缩技术，例如keyframe和预测帧技术。 如果你是经常使用手机上网的用户，那你是最大受益者。即使是桌面用户，当一个页面是有太多的GIF动图时，你也会从这种MP4转换措施中感受到明显的性能上的提升。</li><li>支持播放控制： 让GIF动图暂停播放是绝对不肯能的。当然。有些技术可以从播放的动图中提取一些静态帧，但这不是浏览器的原生功能。视频播放完全可以受浏览器的控制。也就是说，你可以暂停播放、跳跃播放、定位时间，还可以慢速播放等很酷的效果</li><li>兼容性好：原生解码支持，无需引入第三方库，也不会因为动图过大而造成OOM</li><li>视频质量高：通过转换对比，mp4的画面质量是远高于gif的，对于广告这种全屏播放的视频来说，使用gif的效果很差。</li></ol><p><img src="/image/14905998206230.jpg" alt></p><p><strong>相比GIF，MP4的体积减小了12倍左右，加载时间更是减少到了不到1秒</strong></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Ubuntu 14.04的日常开发环境搭建</title>
      <link href="/2016/01/23/%E5%9F%BA%E4%BA%8EUbuntu-14-04%E7%9A%84%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2016/01/23/%E5%9F%BA%E4%BA%8EUbuntu-14-04%E7%9A%84%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>从上大学开始，就开始零零碎碎地接触 Linux 系统，从大一开始我装了不下10次 Ubuntu ，折腾了一段时间之后又弃疗用回了 windows，这跟我写博客的经历有点像，很多东西需要一个契机，然后才能发生彻底的改变。这个契机就是在2015年暑假到豆瓣实习，当时我虽然主要从事的是 Android 开发，但是出于热情以及豆瓣完善的 Python 基础设施，我开始研究 Python，同事的电脑都是OSX，实习之前脑袋一热掏钱买了台最新的 Thinkpad T450s，性能自然没得说，但看到同事都用Mac心里还是有点后悔的，扯远了，说到豆瓣的基础设施，很多都是基于*nix开发的，在windows下我也折腾过类似mingw或者cygwin之类的东西，但是用着实在不爽，后面干脆就彻底抛弃了windows，装了 Ubuntu 14.04，发现开发Android也方便多了，Terminal 各种高效的工具用得得心应手，于是就抛弃了 Windows（除了有时候切回去打炉石。。。）。</p><a id="more"></a><p>想来还是把这些记录一下，一方面是做个笔记方便以后查看，另外一方面也可以给想搭建 Ubuntu 开发环境的同学们一个参考。</p><h3 id="安利下Ubuntu的优点："><a href="#安利下Ubuntu的优点：" class="headerlink" title="安利下Ubuntu的优点："></a>安利下Ubuntu的优点：</h3><ul><li>一个流畅的Linux桌面，可以自己定制各种窗口效果，媲美 OSX</li><li>我认为最重要的是贴近服务器环境，对程序员友好，各种开发环境的搭建都有比较成熟简便的解决方案，不会像 windows下配环境有各种蛋疼的问题（当然如果你想做.net之流另说）</li><li>远离各种国产流氓软件，同时没有了各种游戏，能让你更专注于工作</li><li>当然还有就是成本低，配置一般的电脑均可安装</li></ul><p>仅供参考，下面是我的 Ubuntu 桌面:<br><img src="/image/1453705459339.png" alt></p><p><img src="/image/1453706763250.png" alt></p><h2 id="一-安装篇"><a href="#一-安装篇" class="headerlink" title="一. 安装篇"></a>一. 安装篇</h2><ul><li>Ubuntu 14.04 LTS live CD制作启动盘</li><li>建议拿出至少30G的空间，分区什么的网上都有教程，我比较省事，一个交换分区和+主分区搞定了</li><li>个人推荐 windows 和 Ubuntu 双系统，或者 Ubuntu + windows虚拟机，以应付一些不时之需（网银，企业网站等）</li><li>具体安装流程就是U盘启动安装后一路next下去就行了</li></ul><h2 id="二-日常软件篇"><a href="#二-日常软件篇" class="headerlink" title="二. 日常软件篇"></a>二. 日常软件篇</h2><h3 id="系统配置工具"><a href="#系统配置工具" class="headerlink" title="系统配置工具"></a>系统配置工具</h3><p>介绍几个配置系统的工具:</p><ul><li>自带系统配置：基本满足日常的系统设置</li><li><code>unity tweak tool</code>：升级版的系统设置</li><li><code>Ubuntu tweak</code>：貌似是国产软件，有类似一件垃圾清理的功能，功能大部分和 unity tweak tool 重复</li><li><code>compiz</code>：定制各种桌面特效，由于权限比较大经常把桌面搞崩了，这时候下面这个<strong>重置unity桌面配置</strong>的解决方案就派上用场了<blockquote><p>// Terminal输入:<br>dconf reset -f /org/compiz/<br>setsid unity</p></blockquote></li></ul><h3 id="Terminal-配置"><a href="#Terminal-配置" class="headerlink" title="Terminal 配置"></a>Terminal 配置</h3><p>在Ubuntu下一个好的Terminal能够数倍提升工作效率，我也花了很多的时间在折腾Terminal的配置上，最终效果如下：<br><img src="/image/1453707411276.png" alt></p><p>主要使用到了以下几个工具：</p><h4 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h4><p>zsh是一个扩展的bash，比bash好用不只一点点，<a href="http://ohmyz.sh/" target="_blank" rel="noopener">oh-my-zsh</a>是zsh之上的一个开源配置，包含了各种插件和主题，安装和配置过程<a href="https://github.com/robbyrussell/oh-my-zsh/wiki" target="_blank" rel="noopener">文档</a>里面都很详细了，在这里不赘述。</p><p>主要优点如下：</p><ul><li>智能跳转，配合<code>autojump</code>插件，基本不需要输入<code>cd</code>，自动定位到你最经常去的目录</li><li>智能补全，大小写自动纠正，触发补全只需要按一下或两下 tab 键，补全项可以使用 ctrl+n/p/f/b上下左右切换。比如你想杀掉 java 的进程，只需要输入 <code>kill java</code> + tab键，如果只有一个 java 进程，zsh 会自动替换为进程的 pid，如果有多个则会出现选择项供你选择。ssh + 空格 + 两个tab键，zsh会列出所有访问过的主机和用户名进行补全</li><li>特色主题，实时显示 git 状态</li><li>各种插件支持，<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview" target="_blank" rel="noopener">插件一览</a></li></ul><h4 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h4><p>Ubuntu自带的Terminal并没有支持分屏，多tab支持也不是很好用，我使用了<a href="https://tmux.github.io/" target="_blank" rel="noopener">tmux</a>作为软件分屏工具，通过快捷键快速创建会话和窗口，还有一大优点是窗口意外关闭后还可以通过<code>tmux attach</code>的方式恢复之前的窗口会话。这里提供了一份Tmux的快捷键速查表<a href="https://gist.github.com/MohamedAlaa/2961058" target="_blank" rel="noopener">tmux cheatsheet</a></p><h4 id="vim-之-spf13-懒人配置"><a href="#vim-之-spf13-懒人配置" class="headerlink" title="vim 之 spf13 懒人配置"></a>vim 之 spf13 懒人配置</h4><p>Terminal下自然离不开vim的使用，关于vim的配置估计能写本书了，沿袭了一贯的懒人作风，我使用了最近很火的 <a href="http://vim.spf13.com/" target="_blank" rel="noopener">spf13</a> 配置，这个方案基本一键解决了基本的vim配置。</p><p>个人其实不是很推荐 spf13 默认的 solorized 主题，注意如果你想要的 Terminal 的vim 中使用 Solorized 主题的话，你还需要为你的Terminal安装 Solorized 主题，<a href="http://www.if-not-true-then-false.com/2012/solarized-Linux/#respond" target="_blank" rel="noopener">安装方法</a>。</p><p>上张我的 vim 配置好 spf13 的图：<br><img src="/image/1453723642430.png" alt></p><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><h4 id="Sublime-Text-3"><a href="#Sublime-Text-3" class="headerlink" title="Sublime Text 3"></a>Sublime Text 3</h4><p>作为 windows 时代的忠实伴侣，在 Ubuntu 上的体验却不怎么好，主要是由于 Sublime 众所周知的大bug——不能输入中文，虽然网上有了解决输入法的<a href="http://blog.csdn.net/tao_627/article/details/45126047" target="_blank" rel="noopener">兼容方案</a>，但是该方案仍然存在问题：</p><ol><li>只有显式指定了兼容库启动才能正常使用输入法，单击图标启动就不行了</li><li>当使用兼容库启动时，菜单栏中的一些选项点击后会卡死，比如 <code>Browse Package</code>，Terminal 插件也无法使用</li></ol><p>当然 Sublime 应付大部分的编辑工作还是没有问题的，不过，既然我们使用 Linux 了，为什么不用 Vim 呢？</p><h4 id="IDEA-一家子"><a href="#IDEA-一家子" class="headerlink" title="IDEA 一家子"></a>IDEA 一家子</h4><ol><li>Android 开发之 <a href="http://developer.android.com/sdk/index.html" target="_blank" rel="noopener">Android Studio</a>，官方推荐的IDE，亲测在Ubuntu下启动比windows快得多，无卡顿，编译速度也提升不少。</li><li>python 开发之  <a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">PyCharm</a>，很好用，但是怎么说，也许是 IDE 帮你做得太多了，用着总感觉不爽</li><li>前端开发之 <a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">WebStorm</a></li></ol><h4 id="望而却步的-Emacs"><a href="#望而却步的-Emacs" class="headerlink" title="望而却步的 Emacs"></a>望而却步的 Emacs</h4><p>作为一名编辑器折腾狂，没有接触过编辑器之神 Emacs 那是不应该的，相比与 vim 的 spf13 配置，Emacs 也有类似的整套解决方案——<a href="https://github.com/bbatsov/prelude" target="_blank" rel="noopener">Prelude</a>，功能十分全，也是支持插件扩展的。</p><p>然而，<br>个人觉得 Emacs 操作系统上最好的编辑器还是 evil  （逃。。。</p><h3 id="日常软件"><a href="#日常软件" class="headerlink" title="日常软件"></a>日常软件</h3><h4 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h4><p>输入法我用过 <code>谷歌拼音输入法</code> 和 <code>搜狗拼音输入法</code>，这里要吐槽下，谷歌拼音的单词联想完全不能用，常用词都经常找不到，所以还是墙裂建议使用 <a href="http://pinyin.sogou.com/Linux/" target="_blank" rel="noopener">搜狗拼音</a>。</p><p>注意：搜狗拼音是基于fctix的，但是千万别遵循网上某些教程说的把<code>iBus</code>删除了，否则Ubuntu每次启动的时候都会报错，原因是iBus和某些系统组件有依赖关系。</p><p><img src="/image/1453724296535.png" alt></p><h4 id="印象笔记-马克飞象"><a href="#印象笔记-马克飞象" class="headerlink" title="印象笔记+马克飞象"></a>印象笔记+马克飞象</h4><ul><li>印象笔记并没有  Linux 版本，但是chrome可以把<a href="https://www.yinxiang.com/" target="_blank" rel="noopener">网页版</a>的保存成网页应用，这样每次点击的时候就可以打开新窗口运行，和原生应用区别也不大。<br><img src="/image/1453726895129.png" alt><br><img src="/image/1453727161924.png" alt></li></ul><ul><li><a href="https://maxiang.io" target="_blank" rel="noopener">马克飞象</a>是一个支持markdown编辑的印象笔记编辑器，由国人制作，是付费软件但是个人觉得还是蛮值的，日常记笔记同步笔记十分方便，本文就是使用马象进行编辑<br><img src="/image/1453727224744.png" alt></li></ul><h4 id="IM-解决方案"><a href="#IM-解决方案" class="headerlink" title="IM 解决方案"></a>IM 解决方案</h4><ul><li>QQ：关于QQ在Ubuntu上的安装网上有无数的博客，我基本都一一尝试了，然后得出结论，到目前(<code>2016.1.25</code>)为止，最好用的 QQ 解决方案是这个 <a href="http://blog.csdn.net/yuan1164345228/article/details/20449459" target="_blank" rel="noopener">Linux QQ国际版安装</a> ，即使是最好用的版本，还是存在很多问题:<ul><li>漫游记录无法使用，只能保存本地的</li><li>文件传输经常失败</li><li>视频就别想用了</li><li>主界面隐藏后就再也没法调出了，我的解决方案是：QQ放在一个单独的工作区，然后开启<code>始终保持在其他窗口前端</code>选项，这样就不会有任何窗口覆盖QQ主界面了</li></ul></li></ul><p><img src="/image/1453725551959.png" alt></p><p>最后吐槽下，Linux下最好用的 QQ 都这样你敢信？</p><ul><li><p>Slack：如果你们的团队支持，我是强烈推荐使用Slack的，功能，体验都是一流的，主要是跟 github，CI，trello 等连接后功能变得十分强大。</p></li><li><p>Skype：不用说了，老牌IM，豆瓣内部也在使用，但是我们已经开始逐步过渡到 Slack 。然后 Ubuntu 版本的体验比较渣。</p></li></ul><h4 id="办公软件-WPS"><a href="#办公软件-WPS" class="headerlink" title="办公软件 WPS"></a>办公软件 WPS</h4><p>Ubuntu 自带了全套 LibreOffice，但是对 MS Office文件的兼容惨不忍睹，所以还是推荐使用良心国产软件 <a href="http://community.wps.cn/download/" target="_blank" rel="noopener">WPS</a>，界面精良，基本能够满足日常的办公软件需求。</p><h2 id="三-个人配置篇"><a href="#三-个人配置篇" class="headerlink" title="三. 个人配置篇"></a>三. 个人配置篇</h2><h3 id="capslock键映射为control键"><a href="#capslock键映射为control键" class="headerlink" title="capslock键映射为control键"></a>capslock键映射为control键</h3><p>此处为emacs党福音，将不常使用的capslock键映射成control，告别扭曲的小拇指：</p><ol><li>打开dash，查找<code>启动应用程序</code>，添加开机启动项</li><li>单击<code>添加</code>，名称自定，命令为<code>setxkbmap -option ctrl:nocaps</code></li><li>重启系统完成设置</li></ol><h3 id="关闭USB移动设备的自动弹出"><a href="#关闭USB移动设备的自动弹出" class="headerlink" title="关闭USB移动设备的自动弹出"></a>关闭USB移动设备的自动弹出</h3><p>这个比较难找，记录一下：系统设置-&gt;详细信息-&gt;勾选介质插入时不提示或启动程序<br><img src="/image/1453706618541.png" alt></p><h2 id="四-最后"><a href="#四-最后" class="headerlink" title="四. 最后"></a>四. 最后</h2><p>折腾了这么多，还是想忠告大家一句，如果不差钱的话，还是老实上 Mac 吧，找一个顺手开箱即用的工作，好好提升工作效率才是王道。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>论Android后台Service的持久性</title>
      <link href="/2015/10/16/%E8%AE%BAAndroid%E5%90%8E%E5%8F%B0Service%E7%9A%84%E6%8C%81%E4%B9%85%E6%80%A7/"/>
      <url>/2015/10/16/%E8%AE%BAAndroid%E5%90%8E%E5%8F%B0Service%E7%9A%84%E6%8C%81%E4%B9%85%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="零"><a href="#零" class="headerlink" title="零"></a>零</h2><blockquote><p><a href="http://www.cnblogs.com/newcj/archive/2011/05/30/2061370.html" target="_blank" rel="noopener">Android 中的 Service 全面总结</a></p></blockquote><blockquote><ul><li>service分为local service（主进程运行）和remote service（单独进程运行）</li></ul></blockquote><blockquote><ul><li>local service和thread都运行在主进程中，他们的主要区别是：当一个Activity被销毁时，thread可能还在运行而其他activity无法得到这个thread的引用，<br>导致其变成一个幽灵线程不受控制，但是service可以通过intent机制在四大组件里被操作<a id="more"></a></li></ul></blockquote><p>在Android应用的开发过程中，我们经常需要利用Service在后台做一些持久性的操作，比如推送服务，由于国内没有Google 的GCM统一推送服务，许多独立应用都开发了自己的后台推送Service，但是在Android设备上，这些服务经常因为各种各样的原因意外结束，导致推送机制的失效，那么，研究通过一定手段来保证推送Service在后台的持久运行，对于应用的推送功能稳定性具有重大的意义。</p><p>以下是几种可行的方式：</p><h2 id="一、使用广播唤起"><a href="#一、使用广播唤起" class="headerlink" title="一、使用广播唤起"></a>一、使用广播唤起</h2><p>当应用服务遭到意外终止时，通过<code>BroadcaseReceiver</code>接收广播重新唤起服务。</p><p>几个可以用来作为定期检测Service状态的系统广播：</p><ul><li><p><code>android.intent.action.TIME_TICK</code></p><ul><li>需要<strong>动态注册</strong>，每一分钟系统发送一次，间隔最稳定</li><li>一般在Application中注册使用</li><li>缺点是应用销毁后无效</li></ul></li><li><p><code>android.net.conn.CONNECTIVITY_CHANGE</code></p><ul><li>检测手机网络状态的改变（如移动数据到wifi状态）</li><li>使用该广播唤起推送服务的应用有招行App，微信，QQ等</li><li>缺点：广播间隔不够稳定</li><li>个人觉得这种方式最好，因为可以结合网络状态改变推送策略，如3G网时的询问间隔应该大于wifi状态的询问间隔</li></ul></li><li><p><code>android.intent.action.SCREEN_ON</code>、<code>android.intent.action.SCREEN_OFF</code>、<code>android.intent.action.USER_PRESENT</code></p><ul><li>和屏幕状态有关的广播</li><li>据说在3.0以上版本中，这个广播会在应用完全关闭的情况下被自动屏蔽</li></ul></li></ul><p>以上广播方式存在的问题是；有些手机可以通过订制ROM或者第三方应用，如360手机助手、MyAndroidTools等 <strong>禁用应用的系统广播接收</strong> ，另外，<strong>Android3.0以上的版本中，当应用未曾启动或者进程被完全杀掉后也无法接收广播</strong>    ，因此以上方法可能会不起作用。</p><h2 id="二、CoreService双服务守护"><a href="#二、CoreService双服务守护" class="headerlink" title="二、CoreService双服务守护"></a>二、CoreService双服务守护</h2><p>采用双服务的方式，有<code>MainService</code>（推送服务）和<code>CoreService</code>（守护服务），能够在一定程度上解决服务被杀的问题。</p><ul><li>首先给service设置单独进程</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:name</span>=<span class="string">".MainService"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:process</span>=<span class="string">":ServiceProcess"</span></span></span><br><span class="line"><span class="tag">       &gt;</span><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:name</span>=<span class="string">".CoreService"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:process</span>=<span class="string">":ServiceProcess"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:exported</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>做法是将UI主进程和service进程隔离开来，通常来说，service进程的内存开销是比较小的，如果在默认不指定，Service是附在UI进程运行的，很容易在整体内存占用过大的情况下被一起杀掉。而单独的进程可以有效避免系统的内存回收。</p><p>参考 <a href="http://blog.simophin.net/?p=903" target="_blank" rel="noopener">Android中对推送服务的优化考虑</a></p><ul><li>新建一个轻量级的CoreService作为守护,主要用于唤醒进程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoreService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = CoreService<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(<span class="keyword">final</span> Intent intent)</span> </span>&#123;</span><br><span class="line">        Logger.d(TAG, <span class="string">"onBind()"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        Logger.d(TAG, <span class="string">"onCreate()"</span>);</span><br><span class="line">        keepMeAlive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Logger.d(TAG, <span class="string">"onDestroy()"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(<span class="keyword">final</span> Intent intent, <span class="keyword">final</span> <span class="keyword">int</span> flags, <span class="keyword">final</span> <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// send status notice</span></span><br><span class="line"><span class="comment">//        IntentHandler.sendStatusNoticeToAll(this);</span></span><br><span class="line">        <span class="keyword">this</span>.startService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>,MainService<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        Logger.d(TAG, <span class="string">"onStartCommand"</span>);</span><br><span class="line">        <span class="keyword">return</span> START_STICKY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keepMeAlive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// check every two hour to start process</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> intervalMillis = <span class="number">1000</span>*<span class="number">30</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> triggerAtMillis = now + intervalMillis;</span><br><span class="line">        <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, CoreService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">final</span> PendingIntent operation = PendingIntent.getService(<span class="keyword">this</span>, <span class="number">0</span>, intent,</span><br><span class="line">                PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line">        <span class="keyword">final</span> AlarmManager am = (AlarmManager) getSystemService(ALARM_SERVICE);</span><br><span class="line">        am.setRepeating(AlarmManager.RTC_WAKEUP, triggerAtMillis, intervalMillis, operation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于CoreService基本为空，被清理的可能性大大降低，<code>CoreService</code>对于<code>MainService</code>起到守护的作用：</p><ul><li><p>当MainService被杀而CoreService依然存活时，CoreService能够自动唤起MainService</p></li><li><p>当两者都被杀时，在CoreService的keepMeAlive方法中，利用AlarmManager进行定时处理，每隔一段时间唤醒当前进程，能够在预定时间间隔内唤起CoreService</p></li></ul><hr><p>以上的方法在很大程度上提高了Service的存活率，然而即便使用了这些方法，面对清理助手或是订制ROM的省电功能，服务还是可能会被完全杀掉（目前没有应用的服务能够做到完全存活，微信也是），解决这个问题的方法只能是让用户主动把应用加入的清理的白名单，否则一切还是徒劳。</p><h2 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h2><h3 id="Android应用接收广播"><a href="#Android应用接收广播" class="headerlink" title="Android应用接收广播"></a>Android应用接收广播</h3><h4 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h4><table><thead><tr><th>静态注册</th><th><em>正常运行</em></th><th><em>已结束，进程缓存</em>（能找到进程）</th><th><em>系统清理</em>（找不到进程）</th><th><em>猎豹清理</em>（找不到进程）</th></tr></thead><tbody><tr><td><em>发送系统广播</em></td><td>能</td><td>能</td><td>能</td><td>不能</td></tr><tr><td><em>用户定义广播</em></td><td>能</td><td>能</td><td>能</td><td>不能</td></tr></tbody></table><h4 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h4><table><thead><tr><th>动态注册</th><th><em>正常运行</em></th><th><em>已结束，进程缓存</em>（能找到进程）</th><th><em>系统清理</em>（找不到进程）</th><th><em>猎豹清理</em>（找不到进程）</th></tr></thead><tbody><tr><td><em>发送系统广播</em></td><td>能</td><td>能</td><td>不能</td><td>不能</td></tr><tr><td><em>用户定义广播</em></td><td>能</td><td>能</td><td>不能</td><td>不能</td></tr></tbody></table><p>但是，使用MyAndroidTools发现，有些系统ROM会<strong>自动检测</strong>唤醒频率高的静态注册广播（用户和系统），并<strong>屏蔽</strong>之</p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客进化史</title>
      <link href="/2015/09/23/%E5%8D%9A%E5%AE%A2%E8%BF%9B%E5%8C%96%E5%8F%B2/"/>
      <url>/2015/09/23/%E5%8D%9A%E5%AE%A2%E8%BF%9B%E5%8C%96%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="史前史"><a href="#史前史" class="headerlink" title="史前史"></a>史前史</h2><p>早在刚学编程时候，接触了CSDN，博客园上的一些博客，发现牛人们都十分热衷于分享自己的技术知识，自己也从中获益良多。<br><a id="more"></a><br>分享总是好的，另一方面可以加深自己的理解，只不过实在有些费时，所以当时在博客园和CSDN上先后开了博客，但是都没写几篇就搁置了，略去不提。</p><h2 id="v1-0"><a href="#v1-0" class="headerlink" title="v1.0"></a>v1.0</h2><p>后来技术见长，发现有些工作中遇到的内容网上都没有像样的技术文章，出于分(装)享(X)的需要，我基于Github上自带的Readme渲染机制构建了一个几乎只包含markdown文件的静态<a href="https://github.com/yimun/Blog/blob/master/README.md" target="_blank" rel="noopener">博客</a>，十分轻量级。</p><p>并且我当时还编写了python的<a href="https://github.com/yimun/Blog/blob/master/blogs/001.%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%9E%84%E5%BB%BA/README.md" target="_blank" rel="noopener">脚手架工具</a>，方便创建更新，还带有标签分类功能，但是不能评论。</p><p>当然页面效果也是惨不忍睹，链接关系的处理也很麻烦。没写几篇也搁置了。</p><h2 id="v2-0"><a href="#v2-0" class="headerlink" title="v2.0"></a>v2.0</h2><p>然后就有了这个博客，基于Github Pages，hexo博客框架和NexT主题</p><p>基本上自己没有做什么大的修改，只是一些配置文件的配置，简单是最大优点，把精力放在高质量的写作之上，这才是最重要的。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Migrate To Gradle 手动迁移ADT 的ANT结构工程至Gradle</title>
      <link href="/2015/04/22/Migrate-To-Gradle-%E6%89%8B%E5%8A%A8%E8%BF%81%E7%A7%BBADT-%E7%9A%84ANT%E7%BB%93%E6%9E%84%E5%B7%A5%E7%A8%8B%E8%87%B3Gradle/"/>
      <url>/2015/04/22/Migrate-To-Gradle-%E6%89%8B%E5%8A%A8%E8%BF%81%E7%A7%BBADT-%E7%9A%84ANT%E7%BB%93%E6%9E%84%E5%B7%A5%E7%A8%8B%E8%87%B3Gradle/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在Android Studio 已经发布正式版，其带来的新的功能对于原来的eclipse 用户是非常友好的，只需要指定目录就能自动将代码导入并配置好相关的Gradle 脚本。</p><p>我们可以用正式版的AS中的可视化插件轻松的将旧工程升级到Gradle 构建系统下，而这个项目旨在向大家介绍Gradle 的Android 工程的结构和常用配置。</p><a id="more"></a><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>1、Android Studio<br>2、Intellij IDEA</p><h2 id="了解Gradle"><a href="#了解Gradle" class="headerlink" title="了解Gradle"></a>了解Gradle</h2><p>Gradle 以module 来管理project，在Gradle 构建的Gradle project中通常包含application module（com.android.application），与library module（com.android.library）两种module。</p><p>在Gradle 的project 中需要使用，基本上全都使用.gradle 文件来配置，是一个脚本化的工程构建，而非原先ADT中那种eclipse 的或视化构建。</p><h2 id="迁移工程"><a href="#迁移工程" class="headerlink" title="迁移工程"></a>迁移工程</h2><p>1、创建一个文件夹来放你的工程，比如Migrate to Gradle。</p><p>2、<a href="http://www.gradle.org/docs/current/userguide/gradle_wrapper.html" target="_blank" rel="noopener">Wrapper</a>：你需要Gradle 的Wrapper 来下载和管理当前项目使用的Gradle 的版本，当你的环境中没有配置Gradle 时它可以自动下载Gradle 并配置到你的环境中去。<br>如果你在天朝，那么配置Gradle 的时间可能会稍长，所以我一般都是直接从Android Studio 新建的工程中拷贝Wrapper 出来使用，以避免重复配置不同版本的Gradle。<br>而如果你不想使用工具中的版，你还可以进行其它配置，见下一点。</p><p>3、在文件夹中建一个app （或者其它什么名字）文件夹来存放你的application module，请将你原先的工程文件拷贝到app 文件夹中去。然后你还需要一个build.gradle 和settings.gradle文件。看起来如下图：<br><img src="https://raw.githubusercontent.com/ShinChven/ImmigrateToGradle/master/screenshots/gradle_1.png" alt="Screenshot"><br>两个文件的配置如下：<br>build.gradle  –  根目录的build.gradle 文件一般用来配置整个工程</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:0.14.2'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果你想配置你自己制定的Gradle 版本，加入以下配置，然后在导入工程时选择use customizable gradle wrapper</span></span><br><span class="line">task wrapper(<span class="string">type:</span> Wrapper) &#123;</span><br><span class="line">    gradleVersion = <span class="string">'2.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>settings.gradle  –  根目录的settings.gradle 文件用来制定哪个文件夹为module，以“:”符号给目录分级</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include <span class="string">':app'</span>  <span class="comment">// 根目录下的一级目录</span></span><br><span class="line"><span class="comment">//include ':libs:module0' // 根目录下的二级目录，如果你需要这个module 的话</span></span><br></pre></td></tr></table></figure><p>4、配置你的app module：在其中加入build.gradle，具体配置如下：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter() <span class="comment">//你所使用的仓库</span></span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:0.14.2'</span> <span class="comment">// Gradle 的Android 插件版本</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span> <span class="comment">// 导入Android Application 插件，将此module 配置成application module</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    jcenter() <span class="comment">// 仓库</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line"></span><br><span class="line">    compileSdkVersion <span class="number">21</span> <span class="comment">// 使用SDK的版本，请配置你SDK中有的最新版本</span></span><br><span class="line">    buildToolsVersion <span class="string">"21.1.1"</span> <span class="comment">// buildTools 版本，你SDK中有哪个版本配哪个版本，建议更新到最新的版本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.github.ShinChven.migratetogradle"</span> <span class="comment">// 原来的包名，现在叫applicationId</span></span><br><span class="line">        minSdkVersion <span class="number">9</span></span><br><span class="line">        targetSdkVersion <span class="number">21</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123; <span class="comment">// 配置打包的版本</span></span><br><span class="line">        release &#123; <span class="comment">// 发行版</span></span><br><span class="line">            runProguard <span class="literal">false</span> <span class="comment">// 是否混淆</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.txt'</span> <span class="comment">// 默认混淆文件</span></span><br><span class="line">            proguardFiles <span class="string">'proguard-project.txt'</span> <span class="comment">// 自定义混淆文件</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123; <span class="comment">// debug 版</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sourceSets &#123; <span class="comment">// 如果你的工程是从ANT 中迁移过来，可以使用sourceSets 来配置工程结构，如果你使用的是标准Gradle 结构，可以不需要配置。</span></span><br><span class="line">        main &#123;</span><br><span class="line">            java.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            aidl.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            renderscript.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            res.srcDirs = [<span class="string">'res'</span>]</span><br><span class="line">            assets.srcDirs = [<span class="string">'assets'</span>]</span><br><span class="line">            jniLibs.srcDirs = [<span class="string">'libs'</span>] <span class="comment">// 配置此处才会打包jni 的.so 文件</span></span><br><span class="line">            jni.srcDirs=[<span class="string">'jni'</span>]</span><br><span class="line">            manifest.srcFile <span class="string">'AndroidManifest.xml'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * https://gradle.org/docs/current/dsl/org.gradle.api.artifacts.dsl.DependencyHandler.html</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br><span class="line">    compile <span class="string">'com.android.support:appcompat-v7:21.0.0'</span></span><br><span class="line">    compile <span class="string">'com.android.support:support-v4:21.0.0'</span></span><br><span class="line">    compile(project(<span class="string">':LibModule'</span>)) <span class="comment">// 包含module</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完成这些你的工程就会看起来像这样：<br><img src="https://raw.githubusercontent.com/ShinChven/ImmigrateToGradle/master/screenshots/gradle_0.png" alt="Screenshot"></p><h2 id="运行工程"><a href="#运行工程" class="headerlink" title="运行工程"></a>运行工程</h2><p>1、open project<br><img src="https://raw.githubusercontent.com/ShinChven/ImmigrateToGradle/master/screenshots/Image_3.png" alt="Screenshot"></p><p>2、选中build.gradle 文件<br><img src="https://raw.githubusercontent.com/ShinChven/ImmigrateToGradle/master/screenshots/gradle_4.png" alt="Screenshot"></p><p>3、导入：<br>    project 中包含Wrapper 选Use default gradle wrpper<br>    在project 的task 配置来自动配置gradle 选Use customizable gradle wrapper<br>    Use local Gradle distribution 为使用系统变量中配置的gradle<br><img src="https://raw.githubusercontent.com/ShinChven/ImmigrateToGradle/master/screenshots/gradle_3.png" alt="Screenshot"></p><p>4、如果你是第一次运行Android Studio ，那么请先感谢郭嘉，然后等待配置完成 </p><h2 id="jar包去重"><a href="#jar包去重" class="headerlink" title="jar包去重"></a>jar包去重</h2><p>如果你运气不好遇到了下图，说明你的工程中包含的v4 包或者其它什么包在你的dependencies 配置中出现了重复引用的冲突，你需要去重：<br><img src="https://raw.githubusercontent.com/ShinChven/ImmigrateToGradle/master/screenshots/gradle_2.png" alt="Screenshot"></p><p>如果使用Gradle 构建工程，建议将libs 文件夹中的jar 包都转换成gradle dependencies（依赖），而不是直接存放在文件夹中。两者不可同时存在，否则因为包名、文件重复则报错。</p><p>例如，android-support-v4.jar 你可以在build.Gradle 中这样配置<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123; <span class="comment">// 依赖配置</span></span><br><span class="line">    compile <span class="string">'com.android.support:support-v4:21.0.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="去除冲突的依赖"><a href="#去除冲突的依赖" class="headerlink" title="去除冲突的依赖"></a>去除冲突的依赖</h2><p>你所添加的那些依赖（dependencies）中的项目的可能会引用同一个项目，却是不同版本，在build 的时候可能会出错，如果要去除冲突，配置如下<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compile (<span class="string">'com.github.xxx:1.0'</span>)&#123;</span><br><span class="line">    exclude <span class="string">module:</span> <span class="string">'appcompat-v7'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="build-Gradle-另外的一些配置，Good-luck"><a href="#build-Gradle-另外的一些配置，Good-luck" class="headerlink" title="build.Gradle 另外的一些配置，Good luck."></a>build.Gradle 另外的一些配置，Good luck.</h2><p>配置中的版本号，请根据最新sdk 中的版本进行配置<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">bBuildscript &#123; <span class="comment">// 这段配置如果放入project 级的build.gradle 中则可以在module 中省掉。</span></span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123; <span class="comment">// 加入android build tools</span></span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.1.1'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">repositories &#123; <span class="comment">// 配置仓库</span></span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123; <span class="comment">// android 工程配置</span></span><br><span class="line">    compileSdkVersion <span class="number">22</span></span><br><span class="line">    buildToolsVersion <span class="string">"22.0.1"</span></span><br><span class="line"></span><br><span class="line">    signingConfigs &#123; <span class="comment">// 签名，你可以配置多个签名，然后再在buildTypes 进行指定。</span></span><br><span class="line">        release &#123;</span><br><span class="line">            storeFile file(<span class="string">"keystore\\key.jks"</span>) <span class="comment">// 签名文件存放路径</span></span><br><span class="line">            storePassword <span class="string">"your.password"</span></span><br><span class="line">            keyAlias <span class="string">"your.alias"</span></span><br><span class="line">            keyPassword <span class="string">"password"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    packagingOptions &#123; <span class="comment">// 打包配置</span></span><br><span class="line">        exclude <span class="string">'META-INF/LICENSE'</span> <span class="comment">// 排除一些文件</span></span><br><span class="line">        exclude <span class="string">'META-INF/NOTICE'</span></span><br><span class="line">        exclude <span class="string">'META-INF/LICENSE.txt'</span></span><br><span class="line">        exclude <span class="string">'META-INF/NOTICE.txt'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lintOptions &#123; <span class="comment">// 打包时，也不因为出错中断。</span></span><br><span class="line">        checkReleaseBuilds <span class="literal">false</span></span><br><span class="line">        abortOnError <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123; <span class="comment">// SDK 和版本号配置</span></span><br><span class="line">        minSdkVersion <span class="number">8</span></span><br><span class="line">        targetSdkVersion <span class="number">21</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123; <span class="comment">// 打包版本配置</span></span><br><span class="line">        release &#123;</span><br><span class="line">            signingConfig signingConfigs.release <span class="comment">// 指定签名配置</span></span><br><span class="line">            runProguard <span class="literal">false</span> <span class="comment">// 是否进行Proguard</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.txt'</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;</span><br><span class="line">            <span class="comment">//  signingConfig signingConfigs.release // 如果你的debug版本也需要签名，请将这一行配置解开注释</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sourceSets &#123; <span class="comment">// 工程结构配置</span></span><br><span class="line">        main &#123;</span><br><span class="line">            java.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            aidl.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            renderscript.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            res.srcDirs = [<span class="string">'res'</span>]</span><br><span class="line">            assets.srcDirs = [<span class="string">'assets'</span>]</span><br><span class="line">            jniLibs.srcDirs = [<span class="string">'libs'</span>] <span class="comment">// 配置此处才会打包jni 的.so 文件</span></span><br><span class="line">            manifest.srcFile <span class="string">'AndroidManifest.xml'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123; <span class="comment">// 依赖配置</span></span><br><span class="line">    compile fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>]) <span class="comment">// 整合所有libs 文件夹中的jar 包</span></span><br><span class="line">    compile <span class="string">'com.android.support:support-v4:21.0.0'</span></span><br><span class="line">    compile <span class="string">'com.android.support:gridlayout-v7:21.0.0'</span></span><br><span class="line">    compile <span class="string">'com.android.support:appcompat-v7:20.0.0'</span></span><br><span class="line">    compile <span class="string">'com.loopj.android:android-async-http:1.4.5'</span> <span class="comment">// Maven 中存在的项目</span></span><br><span class="line">    compile(<span class="string">'com.fasterxml.jackson.core:jackson-databind:2.4.1.3'</span>) &#123;</span><br><span class="line">        <span class="comment">// 需要配置 packagingOptions  'META-INF/LICENSE' NOTICE</span></span><br><span class="line">        transitive = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'idea'</span> <span class="comment">// 加载idea 插件</span></span><br><span class="line"></span><br><span class="line">idea &#123;</span><br><span class="line">    module &#123;</span><br><span class="line">        downloadJavadoc = <span class="literal">true</span> <span class="comment">// 下载依赖项目的文档</span></span><br><span class="line">        downloadSources = <span class="literal">true</span> <span class="comment">// 下载依赖项目的源码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="library-modue-build-gradle-文件示例"><a href="#library-modue-build-gradle-文件示例" class="headerlink" title="library modue build.gradle 文件示例"></a>library modue build.gradle 文件示例</h2><p>请注意，以下的配置的某些版本号已经过时，请根据自己的sd配置最新的版本号<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.library'</span> <span class="comment">// 配置为library</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">21</span></span><br><span class="line">    buildToolsVersion <span class="string">"21.1.1"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion <span class="number">9</span></span><br><span class="line">        targetSdkVersion <span class="number">21</span></span><br><span class="line">    &#125;</span><br><span class="line">    sourceSets &#123; <span class="comment">// 工程结构配置</span></span><br><span class="line">        main &#123;</span><br><span class="line">            java.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            aidl.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            renderscript.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            res.srcDirs = [<span class="string">'res'</span>]</span><br><span class="line">            assets.srcDirs = [<span class="string">'assets'</span>]</span><br><span class="line">            jniLibs.srcDirs = [<span class="string">'libs'</span>] <span class="comment">// 配置此处才会打包jni 的.so 文件</span></span><br><span class="line">            manifest.srcFile <span class="string">'AndroidManifest.xml'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br><span class="line">    compile <span class="string">'com.android.support:appcompat-v7:21.0.0'</span></span><br><span class="line">    compile <span class="string">'com.android.support:support-v4:21.0.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="local-properties文件"><a href="#local-properties文件" class="headerlink" title="local.properties文件"></a>local.properties文件</h2><p>在OS X 系统中，你的工程需要这个文件来告诉工具的gradle 插件，你的sdk在哪。如果不进行配置的话将不能使用gradle 插件中的clean build 等方便的功能。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> sdk.dir=<span class="variable">$ANDROID_HOME</span> &gt;local.properties</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2013/07/13/hello-world/"/>
      <url>/2013/07/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>I’m Linwei<br>Welcome to <a href="http://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo new draft <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> PS3 </tag>
            
            <tag> Games </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
